// import { useState } from "react";
// import { toast } from "sonner";
// import { X, Check } from "lucide-react";
// import { Button } from "../../components/ui/button";
// import {
//   Command,
//   CommandEmpty,
//   CommandGroup,
//   CommandInput,
//   CommandItem,
//   CommandList,
// } from "../../components/ui/command";
// import {
//   Popover,
//   PopoverContent,
//   PopoverTrigger,
// } from "../../components/ui/popover";
// import { Calendar } from "../../components/ui/calendar";
// import { Input } from "../../components/ui/input";
// import { motion } from "framer-motion";
// import { Card, CardContent } from "../../components/ui/card";

// // --- Types ---
// type Course = {
//   id: string;
//   code: string;
//   title: string;
// };

// // Define the venue type
// type Venue = {
//   name: string;
//   lat: number;
//   lng: number;
// };

// type CourseSelection = Course & {
//   venue?: Venue;
//   date?: Date;
//   time?: string;
// };

// // --- Sample list of all available courses ---
// const allCourses: Course[] = [
//   { id: "mts101", code: "MTS101", title: "Introduction to Mathematics" },
//   { id: "phs102", code: "PHS102", title: "General Physics" },
//   { id: "chm103", code: "CHM103", title: "Inorganic Chemistry" },
//   { id: "csc104", code: "CSC104", title: "Intro to Programming" },
//   { id: "bio105", code: "BIO105", title: "Cell Biology" },
//   { id: "gns106", code: "GNS106", title: "English & Communication Skills" },
//   { id: "abe204", code: "ABE204", title: "Workshop Practice" },
//   { id: "ele202", code: "ELE202", title: "Applied Electricity" },
//   { id: "mts205", code: "MTS205", title: "Calculus II" },
// ];

// // --- Hardcoded list of venues (replaces Google Places API for this example) ---
// const hardcodedVenues: Venue[] = [
//   { name: "Lecture Hall A", lat: 7.2162, lng: 3.4531 },
//   { name: "Main Auditorium", lat: 7.2185, lng: 3.4542 },
//   { name: "Science Block 301", lat: 7.2158, lng: 3.4529 },
//   { name: "Engineering Lecture Hall", lat: 7.2177, lng: 3.455 },
// ];

// export default function AttendanceDashboard() {
//   const [selectedCourses, setSelectedCourses] = useState<CourseSelection[]>([]);
//   const [open, setOpen] = useState(false);

//   const handleSelect = (course: Course) => {
//     const alreadyAdded = selectedCourses.find((c) => c.id === course.id);
//     if (alreadyAdded) {
//       toast.error("Course already selected");
//       return;
//     }
//     setSelectedCourses((prev) => [...prev, { ...course }]);
//     toast.success(`${course.code} added`);
//     setOpen(false);
//   };

//   const removeCourse = (id: string) => {
//     setSelectedCourses((prev) => prev.filter((c) => c.id !== id));
//   };

//   // Use Partial<CourseSelection> for type-safe updates
//   const handleUpdateCourse = (
//     id: string,
//     updates: Partial<CourseSelection>
//   ) => {
//     setSelectedCourses((prev) =>
//       prev.map((c) => (c.id === id ? { ...c, ...updates } : c))
//     );
//   };

//   const handleSubmit = () => {
//     const coursesToPublish = selectedCourses.filter(
//       (c) => c.date && c.time && c.venue
//     );

//     if (coursesToPublish.length === 0) {
//       toast.error(
//         "Please select a course and fill in all details (venue, date, time)."
//       );
//       return;
//     }

//     // Here you would typically send the data to your backend API
//     // for a lecturer to mark the attendance as active.
//     console.log("Publishing attendance for courses:", coursesToPublish);
//     toast.success("Attendance published successfully!");
//   };

//   return (
//     <motion.div
//       className="max-w-5xl mx-auto py-10 px-4 space-y-10"
//       initial={{ opacity: 0, y: 20 }}
//       animate={{ opacity: 1, y: 0 }}
//       transition={{ type: "spring", stiffness: 100, damping: 20 }}
//     >
//       {/* Header */}
//       <motion.div
//         className="space-y-2"
//         initial={{ opacity: 0, y: 20 }}
//         animate={{ opacity: 1, y: 0 }}
//         transition={{ delay: 0.1, type: "spring" }}
//       >
//         <h2 className="text-3xl font-bold">Welcome, Lecturer</h2>
//         <p className="text-primary max-w-2xl">
//           This dashboard helps you manage student attendance efficiently. You
//           can add courses, set attendance parameters, and start a new session.
//         </p>
//       </motion.div>

//       <motion.div
//         className="grid grid-cols-1 md:grid-cols-3 gap-4"
//         initial={{ opacity: 0, y: 20 }}
//         animate={{ opacity: 1, y: 0 }}
//         transition={{ delay: 0.2, type: "spring" }}
//       >
//         <Card>
//           <CardContent className="p-4">
//             <p className="text-sm text-muted-foreground">Courses Assigned</p>
//             <p className="text-2xl font-bold">3</p>
//           </CardContent>
//         </Card>
//         <Card>
//           <CardContent className="p-4">
//             <p className="text-sm text-muted-foreground">Total Students</p>
//             <p className="text-2xl font-bold">120</p>
//           </CardContent>
//         </Card>
//         <Card>
//           <CardContent className="p-4">
//             <p className="text-sm text-muted-foreground">Avg. Attendance</p>
//             <p className="text-2xl font-bold">87%</p>
//           </CardContent>
//         </Card>
//       </motion.div>

//       {/* Course Selection */}
//       <motion.div
//         className="space-y-4"
//         initial={{ opacity: 0, y: 20 }}
//         animate={{ opacity: 1, y: 0 }}
//         transition={{ delay: 0.3, type: "spring" }}
//       >
//         <div>
//           <h2 className="text-2xl font-bold">Set Up Attendance Session</h2>
//         </div>

//         <Popover open={open} onOpenChange={setOpen}>
//           <PopoverTrigger asChild>
//             <Button variant="default" className="w-full justify-start">
//               Select courses...
//             </Button>
//           </PopoverTrigger>
//           <PopoverContent className="md:w-md w-[300px] p-0">
//             <Command className="w-full dark:text-white">
//               <CommandInput placeholder="Search courses..." />
//               <CommandList>
//                 <CommandEmpty>No results found.</CommandEmpty>
//                 <CommandGroup heading="Courses">
//                   {allCourses.map((course, i) => (
//                     <motion.div
//                       key={course.id}
//                       initial={{ opacity: 0, x: -10 }}
//                       animate={{ opacity: 1, x: 0 }}
//                       transition={{ delay: i * 0.05, type: "spring" }}
//                     >
//                       <CommandItem
//                         value={course.code + " " + course.title}
//                         onSelect={() => handleSelect(course)}
//                       >
//                         <div>
//                           <p className="font-medium">{course.code}</p>
//                           <p className="text-sm text-muted-foreground">
//                             {course.title}
//                           </p>
//                         </div>
//                       </CommandItem>
//                     </motion.div>
//                   ))}
//                 </CommandGroup>
//               </CommandList>
//             </Command>
//           </PopoverContent>
//         </Popover>

//         {/* Selected courses list */}
//         <div className="space-y-4">
//           <h3 className="text-lg font-semibold">Selected Courses</h3>
//           {selectedCourses.length === 0 ? (
//             <p className="text-muted-foreground">No courses selected yet.</p>
//           ) : (
//             <>
//               <div className="space-y-4">
//                 {selectedCourses.map((course, i) => (
//                   <motion.div
//                     key={course.id}
//                     className="p-4 border rounded-md bg-accent shadow-sm space-y-3"
//                     initial={{ opacity: 0, y: 10 }}
//                     animate={{ opacity: 1, y: 0 }}
//                     transition={{ delay: i * 0.05, type: "spring" }}
//                     // whileHover={{ scale: 1.02 }}
//                   >
//                     <div className="flex justify-between items-center">
//                       <p className="font-medium">{course.code}</p>
//                       <Button
//                         variant="ghost"
//                         size="icon"
//                         onClick={() => removeCourse(course.id)}
//                       >
//                         <X className="w-4 h-4" />
//                       </Button>
//                     </div>

//                     {/* Venue selection */}
//                     <Popover>
//                       <PopoverTrigger asChild>
//                         <Button
//                           variant="outline"
//                           className="w-full justify-start"
//                         >
//                           {course.venue?.name || "Select venue"}
//                         </Button>
//                       </PopoverTrigger>
//                       <PopoverContent className="w-[300px] p-0">
//                         <Command>
//                           <CommandInput placeholder="Search venues..." />
//                           <CommandList>
//                             <CommandEmpty>No venues found.</CommandEmpty>
//                             <CommandGroup heading="Venues">
//                               {hardcodedVenues.map((venue, idx) => (
//                                 <CommandItem
//                                   key={idx}
//                                   value={venue.name}
//                                   onSelect={() => {
//                                     handleUpdateCourse(course.id, { venue });
//                                   }}
//                                 >
//                                   {venue.name}
//                                   {course.venue?.name === venue.name && (
//                                     <Check className="ml-auto w-4 h-4 text-green-500" />
//                                   )}
//                                 </CommandItem>
//                               ))}
//                             </CommandGroup>
//                           </CommandList>
//                         </Command>
//                       </PopoverContent>
//                     </Popover>

//                     {/* Date & Time */}
//                     <div className="flex gap-2">
//                       <Popover>
//                         <PopoverTrigger asChild>
//                           <Button variant="outline" className="flex-1">
//                             {course.date
//                               ? course.date.toDateString()
//                               : "Select date"}
//                           </Button>
//                         </PopoverTrigger>
//                         <PopoverContent className="p-0">
//                           <Calendar
//                             mode="single"
//                             selected={course.date}
//                             onSelect={(date) => {
//                               if (date) {
//                                 handleUpdateCourse(course.id, { date });
//                               }
//                             }}
//                             className="text-green-900 dark:text-green-200"
//                           />
//                         </PopoverContent>
//                       </Popover>
//                       <Input
//                         type="time"
//                         className="flex-1"
//                         value={course.time || ""}
//                         onChange={(e) =>
//                           handleUpdateCourse(course.id, {
//                             time: e.target.value,
//                           })
//                         }
//                       />
//                     </div>
//                     <Button onClick={handleSubmit} className="w-full mt-4">
//                       Save Attendance
//                     </Button>
//                   </motion.div>
//                 ))}
//               </div>
//             </>
//           )}
//         </div>
//       </motion.div>
//     </motion.div>
//   );
// }

// import { useState } from "react";
// import { toast } from "sonner";
// import { X, Check } from "lucide-react";
// import { Button } from "../../components/ui/button";
// import {
//   Command,
//   CommandEmpty,
//   CommandGroup,
//   CommandInput,
//   CommandItem,
//   CommandList,
// } from "../../components/ui/command";
// import {
//   Popover,
//   PopoverContent,
//   PopoverTrigger,
// } from "../../components/ui/popover";
// import { Calendar } from "../../components/ui/calendar";
// import { Input } from "../../components/ui/input";
// import { motion } from "framer-motion";
// import { Card, CardContent } from "../../components/ui/card";

// // --- Types ---
// type Course = {
//   id: string;
//   code: string;
//   title: string;
// };

// // Define the venue type
// type Venue = {
//   name: string;
//   lat: number;
//   lng: number;
// };

// type CourseSelection = Course & {
//   venue?: Venue;
//   date?: Date;
//   time?: string;
// };

// // --- Sample list of all available courses ---
// const allCourses: Course[] = [
//   { id: "mts101", code: "MTS101", title: "Introduction to Mathematics" },
//   { id: "phs102", code: "PHS102", title: "General Physics" },
//   { id: "chm103", code: "CHM103", title: "Inorganic Chemistry" },
//   { id: "csc104", code: "CSC104", title: "Intro to Programming" },
//   { id: "bio105", code: "BIO105", title: "Cell Biology" },
//   { id: "gns106", code: "GNS106", title: "English & Communication Skills" },
//   { id: "abe204", code: "ABE204", title: "Workshop Practice" },
//   { id: "ele202", code: "ELE202", title: "Applied Electricity" },
//   { id: "mts205", code: "MTS205", title: "Calculus II" },
// ];

// // --- Hardcoded list of venues (replaces Google Places API for this example) ---
// const hardcodedVenues: Venue[] = [
//   { name: "Lecture Hall A", lat: 7.2162, lng: 3.4531 },
//   { name: "Main Auditorium", lat: 7.2185, lng: 3.4542 },
//   { name: "Science Block 301", lat: 7.2158, lng: 3.4529 },
//   { name: "Engineering Lecture Hall", lat: 7.2177, lng: 3.455 },
// ];

// export default function AttendanceDashboard() {
//   const [selectedCourses, setSelectedCourses] = useState<CourseSelection[]>([]);
//   const [publishedCourses, setPublishedCourses] = useState<CourseSelection[]>([]);
//   const [open, setOpen] = useState(false);

//   const handleSelect = (course: Course) => {
//     const alreadyAdded = selectedCourses.find((c) => c.id === course.id) || publishedCourses.find((c) => c.id === course.id);
//     if (alreadyAdded) {
//       toast.error("Course already selected");
//       return;
//     }
//     setSelectedCourses((prev) => [...prev, { ...course }]);
//     toast.success(`${course.code} added`);
//     setOpen(false);
//   };

//   const removeCourse = (id: string) => {
//     setSelectedCourses((prev) => prev.filter((c) => c.id !== id));
//   };

//   const handleUpdateCourse = (
//     id: string,
//     updates: Partial<CourseSelection>
//   ) => {
//     setSelectedCourses((prev) =>
//       prev.map((c) => (c.id === id ? { ...c, ...updates } : c))
//     );
//   };

//   const handleSubmit = () => {
//     const coursesToPublish = selectedCourses.filter(
//       (c) => c.date && c.time && c.venue
//     );

//     if (coursesToPublish.length === 0) {
//       toast.error(
//         "Please select a course and fill in all details (venue, date, time)."
//       );
//       return;
//     }

//     setPublishedCourses((prev) => [...prev, ...coursesToPublish]);
//     setSelectedCourses([]);
//     toast.success("Attendance published successfully!");
//   };

//   return (
//     <motion.div
//       className="max-w-5xl mx-auto py-10 px-4 space-y-10"
//       initial={{ opacity: 0, y: 20 }}
//       animate={{ opacity: 1, y: 0 }}
//       transition={{ type: "spring", stiffness: 100, damping: 20 }}
//     >
//       {/* Header */}
//       <motion.div
//         className="space-y-2"
//         initial={{ opacity: 0, y: 20 }}
//         animate={{ opacity: 1, y: 0 }}
//         transition={{ delay: 0.1, type: "spring" }}
//       >
//         <h2 className="text-3xl font-bold">Welcome, Lecturer</h2>
//         <p className="text-primary max-w-2xl">
//           This dashboard helps you manage student attendance efficiently. You can
//           add courses, set attendance parameters, and start a new session.
//         </p>
//       </motion.div>

//       <motion.div
//         className="grid grid-cols-1 md:grid-cols-3 gap-4"
//         initial={{ opacity: 0, y: 20 }}
//         animate={{ opacity: 1, y: 0 }}
//         transition={{ delay: 0.2, type: "spring" }}
//       >
//         <Card>
//           <CardContent className="p-4">
//             <p className="text-sm text-muted-foreground">Courses Assigned</p>
//             <p className="text-2xl font-bold">3</p>
//           </CardContent>
//         </Card>
//         <Card>
//           <CardContent className="p-4">
//             <p className="text-sm text-muted-foreground">Total Students</p>
//             <p className="text-2xl font-bold">120</p>
//           </CardContent>
//         </Card>
//         <Card>
//           <CardContent className="p-4">
//             <p className="text-sm text-muted-foreground">Avg. Attendance</p>
//             <p className="text-2xl font-bold">87%</p>
//           </CardContent>
//         </Card>
//       </motion.div>
      
//       {/* --- Course Selection --- */}
//       <motion.div
//         className="space-y-4"
//         initial={{ opacity: 0, y: 20 }}
//         animate={{ opacity: 1, y: 0 }}
//         transition={{ delay: 0.3, type: "spring" }}
//       >
//         <div>
//           <h2 className="text-2xl font-bold">Set Up Attendance Session</h2>
//         </div>

//         <Popover open={open} onOpenChange={setOpen}>
//           <PopoverTrigger asChild>
//             <Button variant="default" className="w-full justify-start">
//               Select courses...
//             </Button>
//           </PopoverTrigger>
//           <PopoverContent className="md:w-md w-[300px] p-0">
//             <Command className="w-full dark:text-white">
//               <CommandInput placeholder="Search courses..." />
//               <CommandList>
//                 <CommandEmpty>No results found.</CommandEmpty>
//                 <CommandGroup heading="Courses">
//                   {allCourses.map((course, i) => (
//                     <motion.div
//                       key={course.id}
//                       initial={{ opacity: 0, x: -10 }}
//                       animate={{ opacity: 1, x: 0 }}
//                       transition={{ delay: i * 0.05, type: "spring" }}
//                     >
//                       <CommandItem
//                         value={course.code + " " + course.title}
//                         onSelect={() => handleSelect(course)}
//                       >
//                         <div>
//                           <p className="font-medium">{course.code}</p>
//                           <p className="text-sm text-muted-foreground">
//                             {course.title}
//                           </p>
//                         </div>
//                       </CommandItem>
//                     </motion.div>
//                   ))}
//                 </CommandGroup>
//               </CommandList>
//             </Command>
//           </PopoverContent>
//         </Popover>

//         {/* Selected courses list */}
//         <div className="space-y-4">
//           <h3 className="text-lg font-semibold">Selected Courses</h3>
//           {selectedCourses.length === 0 ? (
//             <p className="text-muted-foreground">No courses selected yet.</p>
//           ) : (
//             <div className="space-y-4">
//               {selectedCourses.map((course, i) => (
//                 <motion.div
//                   key={course.id}
//                   className="p-4 border rounded-md bg-accent shadow-sm space-y-3"
//                   initial={{ opacity: 0, y: 10 }}
//                   animate={{ opacity: 1, y: 0 }}
//                   transition={{ delay: i * 0.05, type: "spring" }}
//                 >
//                   <div className="flex justify-between items-center">
//                     <p className="font-medium">{course.code}</p>
//                     <Button
//                       variant="ghost"
//                       size="icon"
//                       onClick={() => removeCourse(course.id)}
//                     >
//                       <X className="w-4 h-4" />
//                     </Button>
//                   </div>

//                   {/* Venue selection */}
//                   <Popover>
//                     <PopoverTrigger asChild>
//                       <Button
//                         variant="outline"
//                         className="w-full justify-start"
//                       >
//                         {course.venue?.name || "Select venue"}
//                       </Button>
//                     </PopoverTrigger>
//                     <PopoverContent className="w-[300px] p-0">
//                       <Command>
//                         <CommandInput placeholder="Search venues..." />
//                         <CommandList>
//                           <CommandEmpty>No venues found.</CommandEmpty>
//                           <CommandGroup heading="Venues">
//                             {hardcodedVenues.map((venue, idx) => (
//                               <CommandItem
//                                 key={idx}
//                                 value={venue.name}
//                                 onSelect={() => {
//                                   handleUpdateCourse(course.id, { venue });
//                                 }}
//                               >
//                                 {venue.name}
//                                 {course.venue?.name === venue.name && (
//                                   <Check className="ml-auto w-4 h-4 text-green-500" />
//                                 )}
//                               </CommandItem>
//                             ))}
//                           </CommandGroup>
//                         </CommandList>
//                       </Command>
//                     </PopoverContent>
//                   </Popover>

//                   {/* Date & Time */}
//                   <div className="flex gap-2">
//                     <Popover>
//                       <PopoverTrigger asChild>
//                         <Button variant="outline" className="flex-1">
//                           {course.date
//                             ? course.date.toDateString()
//                             : "Select date"}
//                         </Button>
//                       </PopoverTrigger>
//                       <PopoverContent className="p-0">
//                         <Calendar
//                           mode="single"
//                           selected={course.date}
//                           onSelect={(date) => {
//                             if (date) {
//                               handleUpdateCourse(course.id, { date });
//                             }
//                           }}
//                           className="text-green-900 dark:text-green-200"
//                         />
//                       </PopoverContent>
//                     </Popover>
//                     <Input
//                       type="time"
//                       className="flex-1"
//                       value={course.time || ""}
//                       onChange={(e) =>
//                         handleUpdateCourse(course.id, {
//                           time: e.target.value,
//                         })
//                       }
//                     />
//                   </div>
//                 </motion.div>
//               ))}
//               <Button onClick={handleSubmit} className="w-full mt-4">
//                 Publish Attendance
//               </Button>
//             </div>
//           )}
//         </div>
//       </motion.div>
      
//       {/* --- Published Courses Section --- */}
//       <motion.div
//         className="space-y-4"
//         initial={{ opacity: 0, y: 20 }}
//         animate={{ opacity: 1, y: 0 }}
//         transition={{ delay: 0.5, type: "spring" }}
//       >
//         <div>
//           <h2 className="text-2xl font-bold">Active Attendance Sessions</h2>
//         </div>
//         {publishedCourses.length === 0 ? (
//           <p className="text-muted-foreground">
//             No attendance sessions have been published yet.
//           </p>
//         ) : (
//           <div className="space-y-4">
//             {publishedCourses.map((course, i) => (
//               <motion.div
//                 key={course.id}
//                 className="p-4 border rounded-md bg-white dark:bg-zinc-800 shadow-sm space-y-2"
//                 initial={{ opacity: 0, y: 10 }}
//                 animate={{ opacity: 1, y: 0 }}
//                 transition={{ delay: i * 0.1, type: "spring" }}
//               >
//                 <div className="flex justify-between items-center">
//                   <h4 className="font-semibold text-lg">{course.code}</h4>
//                 </div>
//                 <div className="text-sm text-muted-foreground">
//                   <p>
//                     <span className="font-medium">Venue:</span>{" "}
//                     {course.venue?.name}
//                   </p>
//                   <p>
//                     <span className="font-medium">Date:</span>{" "}
//                     {course.date?.toDateString()}
//                   </p>
//                   <p>
//                     <span className="font-medium">Time:</span> {course.time}
//                   </p>
//                 </div>
//               </motion.div>
//             ))}
//           </div>
//         )}
//       </motion.div>
//     </motion.div>
//   );
// }



































// // import { motion } from "framer-motion";
// // import MarkAttendance from "../components/MarkAttendance";
// // import { Card, CardContent } from "../components/ui/card";
// // import { useState } from "react";
// // import { toast } from "sonner";

// // export default function Dashboard() {
// //   const [locationGranted, setLocationGranted] = useState(false);

// //   const handleGrantLocation = () => {
// //     if (!navigator.geolocation) {
// //       toast.error("Geolocation is not supported by your browser.");
// //       return;
// //     }

// //     navigator.geolocation.getCurrentPosition(
// //       (position) => {
// //         const userLat = position.coords.latitude;
// //         const userLng = position.coords.longitude;

// //         // Example lecture hall location (update with real coords)
// //         const lectureLat = 7.2162;
// //         const lectureLng = 3.4531;

// //         // Radius check (25 meters)
// //         const R = 6371000; // Earth radius in meters
// //         const dLat = ((lectureLat - userLat) * Math.PI) / 180;
// //         const dLng = ((lectureLng - userLng) * Math.PI) / 180;
// //         const a =
// //           Math.sin(dLat / 2) * Math.sin(dLat / 2) +
// //           Math.cos((userLat * Math.PI) / 180) *
// //             Math.cos((lectureLat * Math.PI) / 180) *
// //             Math.sin(dLng / 2) *
// //             Math.sin(dLng / 2);
// //         const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
// //         const distance = R * c;

// //         if (distance <= 10) {
// //           setLocationGranted(true);
// //           toast.success("Location verified! You can now mark attendance.");
// //         } else {
// //           toast.error("You are not within the lecture hall perimeter.");
// //         }
// //       },
// //       () => {
// //         toast.error("Unable to retrieve your location.");
// //       }
// //     );
// //   };

// //   return (
// //     <div className="px-4 md:mx-4 mb-12 md:mb-0 overflow-x-hidden">
// //       <div className="mt-10 mb-6">
// //         <motion.h1
// //           initial={{ opacity: 0, scale: 0.8 }}
// //           animate={{ opacity: 1, scale: 1 }}
// //           transition={{
// //             duration: 0.8,
// //             ease: "easeOut",
// //             type: "spring",
// //             stiffness: 120,
// //           }}
// //           className="text-4xl text-center font-bold"
// //         >
// //           Welcome,{" "}
// //           <span className="text-cyan-700 dark:text-cyan-200 text-5xl">
// //             20251234!
// //           </span>
// //         </motion.h1>
// //       </div>
// //       <motion.h2
// //         initial={{ opacity: 0, x: -80 }}
// //         animate={{ opacity: 1, x: 0 }}
// //         transition={{ duration: 0.8, ease: "easeOut" }}
// //         className="text-3xl font-semibold mb-6 md:mt-2 mt-14"
// //       >
// //         Attendance Dashboard –{" "}
// //         <span className="text-cyan-700 dark:text-cyan-200">Mark Courses</span>
// //       </motion.h2>

// //       <motion.div
// //         initial={{ opacity: 0, x: 80 }}
// //         animate={{ opacity: 1, x: 0 }}
// //         transition={{ duration: 0.8, ease: "easeOut" }}
// //       >
// //         <div className="flex justify-center md:justify-start mb-6">
// //           <button
// //             onClick={handleGrantLocation}
// //             className="px-6 py-2 rounded-xl bg-cyan-700 dark:bg-cyan-200 text-white dark:text-black hover:bg-cyan-600 dark:hover:bg-cyan-300"
// //           >
// //             Grant Location Access
// //           </button>
// //         </div>
// //         <Card className="shadow-lg">
// //           <CardContent className="overflow-x-auto p-0">
// //             <MarkAttendance locationGranted={locationGranted} />
// //           </CardContent>
// //         </Card>
// //       </motion.div>
// //     </div>
// //   );
// // }

// import { motion } from "framer-motion";
// import MarkAttendance from "../components/MarkAttendance";
// import { Card, CardContent } from "../components/ui/card";
// import { useState } from "react";
// import { toast } from "sonner";

// // Define a constant for the geofence radius.
// // A radius between 15 and 25 meters is more realistic for an indoor geofence.
// const GEOFENCE_RADIUS_METERS = 20;

// export default function Dashboard() {
//   const [locationGranted, setLocationGranted] = useState(false);

//   const handleGrantLocation = () => {
//     // Check if the browser supports geolocation
//     if (!navigator.geolocation) {
//       toast.error("Geolocation is not supported by your browser.");
//       return;
//     }

//     // Attempt to get the user's current position
//     navigator.geolocation.getCurrentPosition(
//       (position) => {
//         // Retrieve the user's coordinates
//         const userLat = position.coords.latitude;
//         const userLng = position.coords.longitude;

//         // --- Geofence Coordinates ---
//         // These should be the real coordinates of the lecture hall.
//         const lectureLat = 7.2162;
//         const lectureLng = 3.4531;

//         // Haversine formula to calculate the distance between two points on Earth
//         const toRadians = (deg: number) => deg * (Math.PI / 180);
//         const R = 6371e3; // Earth's radius in meters
//         const dLat = toRadians(lectureLat - userLat);
//         const dLng = toRadians(lectureLng - userLng);

//         const a =
//           Math.sin(dLat / 2) * Math.sin(dLat / 2) +
//           Math.cos(toRadians(userLat)) *
//             Math.cos(toRadians(lectureLat)) *
//             Math.sin(dLng / 2) *
//             Math.sin(dLng / 2);

//         const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

//         const distance = R * c; // Distance in meters

//         // Check if the user is within the geofence radius
//         if (distance <= GEOFENCE_RADIUS_METERS) {
//           setLocationGranted(true);
//           toast.success("Location verified! You are within the attendance zone.");
//         } else {
//           toast.error("You are not within the lecture hall perimeter. Distance: " + Math.round(distance) + "m");
//         }
//       },
//       // Error callback
//       (error) => {
//         let errorMessage = "Unable to retrieve your location.";
//         if (error.code === error.PERMISSION_DENIED) {
//             errorMessage = "Please grant location access to mark attendance.";
//         }
//         toast.error(errorMessage);
//       }
//     );
//   };

//   return (
//     <div className="px-4 md:mx-4 mb-12 md:mb-0 overflow-x-hidden">
//       <div className="mt-10 mb-6">
//         <motion.h1
//           initial={{ opacity: 0, scale: 0.8 }}
//           animate={{ opacity: 1, scale: 1 }}
//           transition={{
//             duration: 0.8,
//             ease: "easeOut",
//             type: "spring",
//             stiffness: 120,
//           }}
//           className="text-4xl text-center font-bold"
//         >
//           Welcome,{" "}
//           <span className="text-cyan-700 dark:text-cyan-200 text-5xl">
//             20251234!
//           </span>
//         </motion.h1>
//       </div>
//       <motion.h2
//         initial={{ opacity: 0, x: -80 }}
//         animate={{ opacity: 1, x: 0 }}
//         transition={{ duration: 0.8, ease: "easeOut" }}
//         className="text-3xl font-semibold mb-6 md:mt-2 mt-14"
//       >
//         Attendance Dashboard –{" "}
//         <span className="text-cyan-700 dark:text-cyan-200">Mark Courses</span>
//       </motion.h2>

//       <motion.div
//         initial={{ opacity: 0, x: 80 }}
//         animate={{ opacity: 1, x: 0 }}
//         transition={{ duration: 0.8, ease: "easeOut" }}
//       >
//         <div className="flex justify-center md:justify-start mb-6">
//           <button
//             onClick={handleGrantLocation}
//             className="px-6 py-2 rounded-xl bg-cyan-700 dark:bg-cyan-200 text-white dark:text-black hover:bg-cyan-600 dark:hover:bg-cyan-300"
//           >
//             Grant Location Access
//           </button>
//         </div>
//         <Card className="shadow-lg">
//           <CardContent className="overflow-x-auto p-0">
//             <MarkAttendance locationGranted={locationGranted} />
//           </CardContent>
//         </Card>
//       </motion.div>
//     </div>
//   );
// }


// import { useState } from "react";
// import { X, Check } from "lucide-react";
// import { Button } from "../../components/ui/button";
// import {
//   Command,
//   CommandEmpty,
//   CommandGroup,
//   CommandInput,
//   CommandItem,
//   CommandList,
// } from "../../components/ui/command";
// import {
//   Popover,
//   PopoverContent,
//   PopoverTrigger,
// } from "../../components/ui/popover";
// import { Calendar } from "../../components/ui/calendar";
// import { Input } from "../../components/ui/input";
// import { motion } from "framer-motion";
// import { Card, CardContent } from "../../components/ui/card";
// import { toast } from "sonner";

// // --- Types ---
// type Course = {
//   id: string;
//   code: string;
//   title: string;
// };

// type Venue = {
//   id: string;
//   name: string;
//   lat: number;
//   lng: number;
//   radius: number;
//   building?: string;
//   floor?: string;
//   capacity?: number;
//   isActive: boolean;
// };

// type CourseSelection = Course & {
//   venue?: Venue;
//   date?: Date;
//   time?: string;
// };

// // --- Sample list of all available courses ---
// const allCourses: Course[] = [
//   { id: "mts101", code: "MTS101", title: "Introduction to Mathematics" },
//   { id: "phs102", code: "PHS102", title: "General Physics" },
//   { id: "chm103", code: "CHM103", title: "Inorganic Chemistry" },
//   { id: "csc104", code: "CSC104", title: "Intro to Programming" },
//   { id: "bio105", code: "BIO105", title: "Cell Biology" },
//   { id: "gns106", code: "GNS106", title: "English & Communication Skills" },
//   { id: "abe204", code: "ABE204", title: "Workshop Practice" },
//   { id: "ele202", code: "ELE202", title: "Applied Electricity" },
//   { id: "mts205", code: "MTS205", title: "Calculus II" },
// ];

// // --- Venues ---
// const venues: Venue[] = [
//   {
//     id: "lh-a",
//     name: "Lecture Hall A",
//     lat: 7.2162,
//     lng: 3.4531,
//     radius: 25,
//     building: "Academic Block",
//     floor: "Ground Floor",
//     capacity: 200,
//     isActive: true,
//   },
//   {
//     id: "main-aud",
//     name: "Main Auditorium",
//     lat: 7.2185,
//     lng: 3.4542,
//     radius: 30,
//     building: "Main Building",
//     floor: "First Floor",
//     capacity: 500,
//     isActive: true,
//   },
//   {
//     id: "sci-301",
//     name: "Science Block 301",
//     lat: 7.2158,
//     lng: 3.4529,
//     radius: 20,
//     building: "Science Block",
//     floor: "Third Floor",
//     capacity: 50,
//     isActive: true,
//   },
//   {
//     id: "eng-lh",
//     name: "Engineering Lecture Hall",
//     lat: 7.2177,
//     lng: 3.455,
//     radius: 35,
//     building: "Engineering Block",
//     floor: "Second Floor",
//     capacity: 150,
//     isActive: true,
//   },
// ];

// export default function AttendanceDashboard() {
//   const [selectedCourses, setSelectedCourses] = useState<CourseSelection[]>([]);
//   const [publishedCourses, setPublishedCourses] = useState<CourseSelection[]>([]);
//   const [open, setOpen] = useState(false);

//   const handleSelect = (course: Course) => {
//     const alreadyAdded =
//       selectedCourses.find((c) => c.id === course.id) ||
//       publishedCourses.find((c) => c.id === course.id);
//     if (alreadyAdded) {
//       toast.error("Course already selected");
//       return;
//     }
//     setSelectedCourses((prev) => [...prev, { ...course }]);
//     toast.success(`${course.code} added`);
//     setOpen(false);
//   };

//   const removeCourse = (id: string) => {
//     setSelectedCourses((prev) => prev.filter((c) => c.id !== id));
//   };

//   const handleUpdateCourse = (id: string, updates: Partial<CourseSelection>) => {
//     setSelectedCourses((prev) =>
//       prev.map((c) => (c.id === id ? { ...c, ...updates } : c))
//     );
//   };

//   const handleSubmit = () => {
//     const coursesToPublish = selectedCourses.filter(
//       (c) => c.date && c.time && c.venue
//     );

//     if (coursesToPublish.length === 0) {
//       toast.error("Please select a course and fill in all details (venue, date, time).");
//       return;
//     }

//     setPublishedCourses((prev) => [...prev, ...coursesToPublish]);
//     setSelectedCourses([]);
//     toast.success("Attendance published successfully!");
//   };

//   return (
//     <motion.div
//       className="max-w-5xl mx-auto py-10 px-4 space-y-10"
//       initial={{ opacity: 0, y: 20 }}
//       animate={{ opacity: 1, y: 0 }}
//       transition={{ type: "spring", stiffness: 100, damping: 20 }}
//     >
//       {/* Header */}
//       <motion.div
//         className="space-y-2"
//         initial={{ opacity: 0, y: 20 }}
//         animate={{ opacity: 1, y: 0 }}
//         transition={{ delay: 0.1, type: "spring" }}
//       >
//         <h2 className="text-3xl font-bold">Welcome, Lecturer</h2>
//         <p className="text-primary max-w-2xl">
//           This dashboard helps you manage student attendance efficiently. You can
//           add courses, set attendance parameters, and start a new session.
//         </p>
//       </motion.div>

//       {/* Stats */}
//       <motion.div
//         className="grid grid-cols-1 md:grid-cols-3 gap-4"
//         initial={{ opacity: 0, y: 20 }}
//         animate={{ opacity: 1, y: 0 }}
//         transition={{ delay: 0.2, type: "spring" }}
//       >
//         <Card>
//           <CardContent className="p-4">
//             <p className="text-sm text-muted-foreground">Courses Assigned</p>
//             <p className="text-2xl font-bold">{allCourses.length}</p>
//           </CardContent>
//         </Card>
//         <Card>
//           <CardContent className="p-4">
//             <p className="text-sm text-muted-foreground">Sessions Published</p>
//             <p className="text-2xl font-bold">{publishedCourses.length}</p>
//           </CardContent>
//         </Card>
//         <Card>
//           <CardContent className="p-4">
//             <p className="text-sm text-muted-foreground">Active Sessions</p>
//             <p className="text-2xl font-bold">
//               {publishedCourses.filter((c) => c.date && c.date >= new Date()).length}
//             </p>
//           </CardContent>
//         </Card>
//       </motion.div>

//       {/* Course Selection */}
//       <motion.div
//         className="space-y-4"
//         initial={{ opacity: 0, y: 20 }}
//         animate={{ opacity: 1, y: 0 }}
//         transition={{ delay: 0.3, type: "spring" }}
//       >
//         <h2 className="text-2xl font-bold">Set Up Attendance Session</h2>

//         <Popover open={open} onOpenChange={setOpen}>
//           <PopoverTrigger asChild>
//             <Button variant="default" className="w-full justify-start">
//               Select courses...
//             </Button>
//           </PopoverTrigger>
//           <PopoverContent className="md:w-md w-[300px] p-0">
//             <Command className="w-full dark:text-white">
//               <CommandInput placeholder="Search courses..." />
//               <CommandList>
//                 <CommandEmpty>No results found.</CommandEmpty>
//                 <CommandGroup heading="Courses">
//                   {allCourses.map((course, i) => (
//                     <motion.div
//                       key={course.id}
//                       initial={{ opacity: 0, x: -10 }}
//                       animate={{ opacity: 1, x: 0 }}
//                       transition={{ delay: i * 0.05, type: "spring" }}
//                     >
//                       <CommandItem
//                         value={course.code + " " + course.title}
//                         onSelect={() => handleSelect(course)}
//                       >
//                         <div>
//                           <p className="font-medium">{course.code}</p>
//                           <p className="text-sm text-muted-foreground">
//                             {course.title}
//                           </p>
//                         </div>
//                       </CommandItem>
//                     </motion.div>
//                   ))}
//                 </CommandGroup>
//               </CommandList>
//             </Command>
//           </PopoverContent>
//         </Popover>

//         {/* Selected Courses */}
//         <div className="space-y-4">
//           <h3 className="text-lg font-semibold">Selected Courses</h3>
//           {selectedCourses.length === 0 ? (
//             <p className="text-muted-foreground">No courses selected yet.</p>
//           ) : (
//             <div className="space-y-4">
//               {selectedCourses.map((course, i) => (
//                 <motion.div
//                   key={course.id}
//                   className="p-4 border rounded-md bg-accent shadow-sm space-y-3"
//                   initial={{ opacity: 0, y: 10 }}
//                   animate={{ opacity: 1, y: 0 }}
//                   transition={{ delay: i * 0.05, type: "spring" }}
//                 >
//                   <div className="flex justify-between items-center">
//                     <p className="font-medium">{course.code}</p>
//                     <Button
//                       variant="ghost"
//                       size="icon"
//                       onClick={() => removeCourse(course.id)}
//                     >
//                       <X className="w-4 h-4" />
//                     </Button>
//                   </div>

//                   {/* Venue Selection */}
//                   <Popover>
//                     <PopoverTrigger asChild>
//                       <Button variant="outline" className="w-full justify-start">
//                         {course.venue
//                           ? `${course.venue.name} (${course.venue.building})`
//                           : "Select venue"}
//                       </Button>
//                     </PopoverTrigger>
//                     <PopoverContent className="w-[300px] p-0">
//                       <Command>
//                         <CommandInput placeholder="Search venues..." />
//                         <CommandList>
//                           <CommandEmpty>No venues found.</CommandEmpty>
//                           <CommandGroup heading="Venues">
//                             {venues
//                               .filter((v) => v.isActive)
//                               .map((venue) => (
//                                 <CommandItem
//                                   key={venue.id}
//                                   value={venue.name + " " + venue.building}
//                                   onSelect={() =>
//                                     handleUpdateCourse(course.id, { venue })
//                                   }
//                                 >
//                                   <div className="flex flex-col">
//                                     <span className="font-medium">{venue.name}</span>
//                                     <span className="text-sm text-muted-foreground">
//                                       {venue.building} • {venue.floor} • Cap:{" "}
//                                       {venue.capacity}
//                                     </span>
//                                   </div>
//                                   {course.venue?.id === venue.id && (
//                                     <Check className="ml-auto w-4 h-4 text-green-500" />
//                                   )}
//                                 </CommandItem>
//                               ))}
//                           </CommandGroup>
//                         </CommandList>
//                       </Command>
//                     </PopoverContent>
//                   </Popover>

//                   {/* Date & Time */}
//                   <div className="flex gap-2">
//                     <Popover>
//                       <PopoverTrigger asChild>
//                         <Button variant="outline" className="flex-1">
//                           {course.date
//                             ? course.date.toDateString()
//                             : "Select date"}
//                         </Button>
//                       </PopoverTrigger>
//                       <PopoverContent className="p-0">
//                         <Calendar
//                           mode="single"
//                           selected={course.date}
//                           onSelect={(date) => {
//                             if (date) handleUpdateCourse(course.id, { date });
//                           }}
//                         />
//                       </PopoverContent>
//                     </Popover>
//                     <Input
//                       type="time"
//                       className="flex-1"
//                       value={course.time || ""}
//                       onChange={(e) =>
//                         handleUpdateCourse(course.id, { time: e.target.value })
//                       }
//                     />
//                   </div>

//                   {/* Venue Details */}
//                   {course.venue && (
//                     <div className="text-sm text-muted-foreground bg-muted p-2 rounded">
//                       <p>
//                         <strong>Building:</strong> {course.venue.building}
//                       </p>
//                       <p>
//                         <strong>Floor:</strong> {course.venue.floor}
//                       </p>
//                       <p>
//                         <strong>Capacity:</strong> {course.venue.capacity} students
//                       </p>
//                       <p>
//                         <strong>Detection Radius:</strong> {course.venue.radius}m
//                       </p>
//                     </div>
//                   )}
//                 </motion.div>
//               ))}
//               <Button onClick={handleSubmit} className="w-full mt-4">
//                 Publish Attendance
//               </Button>
//             </div>
//           )}
//         </div>
//       </motion.div>

//       {/* Published Courses */}
//       <motion.div
//         className="space-y-4"
//         initial={{ opacity: 0, y: 20 }}
//         animate={{ opacity: 1, y: 0 }}
//         transition={{ delay: 0.5, type: "spring" }}
//       >
//         <h2 className="text-2xl font-bold">Active Attendance Sessions</h2>
//         {publishedCourses.length === 0 ? (
//           <p className="text-muted-foreground">
//             No attendance sessions have been published yet.
//           </p>
//         ) : (
//           <div className="space-y-4">
//             {publishedCourses.map((course, i) => (
//               <motion.div
//                 key={course.id}
//                 className="p-4 border rounded-md bg-white dark:bg-zinc-800 shadow-sm space-y-2"
//                 initial={{ opacity: 0, y: 10 }}
//                 animate={{ opacity: 1, y: 0 }}
//                 transition={{ delay: i * 0.1, type: "spring" }}
//               >
//                 <div className="flex justify-between items-center">
//                   <h4 className="font-semibold text-lg">{course.code}</h4>
//                   <span className="text-sm text-green-600 font-medium">
//                     Active
//                   </span>
//                 </div>
//                 <div className="text-sm text-muted-foreground">
//                   <p>
//                     <span className="font-medium">Venue:</span>{" "}
//                     {course.venue?.name} ({course.venue?.building})
//                   </p>
//                   <p>
//                     <span className="font-medium">Date:</span>{" "}
//                     {course.date?.toDateString()}
//                   </p>
//                   <p>
//                     <span className="font-medium">Time:</span> {course.time}
//                   </p>
//                   <p>
//                     <span className="font-medium">Detection Radius:</span>{" "}
//                     {course.venue?.radius}m
//                   </p>
//                 </div>
//               </motion.div>
//             ))}
//           </div>
//         )}
//       </motion.div>
//     </motion.div>
//   );
// }

// import { useState } from "react";
// import { X, Check } from "lucide-react";
// import { Button } from "../../components/ui/button";
// import {
//   Command,
//   CommandEmpty,
//   CommandGroup,
//   CommandInput,
//   CommandItem,
//   CommandList,
// } from "../../components/ui/command";
// import {
//   Popover,
//   PopoverContent,
//   PopoverTrigger,
// } from "../../components/ui/popover";
// import { Input } from "../../components/ui/input";
// import { motion } from "framer-motion";
// import { Card, CardContent } from "../../components/ui/card";
// import { toast } from "sonner";

// // --- Types ---
// type Venue = {
//   id: string;
//   name: string;
//   lat: number;
//   lng: number;
//   radius: number;
//   building?: string;
//   floor?: string;
//   capacity?: number;
//   isActive: boolean;
// };

// type CourseSelection = {
//   courseCode: string;
//   courseTitle: string;
//   courseDescription: string;
//   lecturers: string[];
//   courseTime: string;
//   courseDays: string[];
//   courseVenue: string[];
//   isActive: boolean;
//   venue?: Venue;
//   date?: Date;
// };

// // --- Sample list of all available courses ---
// const allCourses: CourseSelection[] = [
//   {
//     courseCode: "MTS101",
//     courseTitle: "Introduction to Mathematics",
//     courseDescription: "Introduction to Mathematics course description",
//     lecturers: [],
//     courseTime: "",
//     courseDays: [],
//     courseVenue: [],
//     isActive: true,
//   },
//   {
//     courseCode: "PHS102",
//     courseTitle: "General Physics",
//     courseDescription: "General Physics course description",
//     lecturers: [],
//     courseTime: "",
//     courseDays: [],
//     courseVenue: [],
//     isActive: true,
//   },
//   {
//     courseCode: "CHM103",
//     courseTitle: "Inorganic Chemistry",
//     courseDescription: "Inorganic Chemistry course description",
//     lecturers: [],
//     courseTime: "",
//     courseDays: [],
//     courseVenue: [],
//     isActive: true,
//   },
//   {
//     courseCode: "CSC104",
//     courseTitle: "Intro to Programming",
//     courseDescription: "Intro to Programming course description",
//     lecturers: [],
//     courseTime: "",
//     courseDays: [],
//     courseVenue: [],
//     isActive: true,
//   },
//   {
//     courseCode: "BIO105",
//     courseTitle: "Cell Biology",
//     courseDescription: "Cell Biology course description",
//     lecturers: [],
//     courseTime: "",
//     courseDays: [],
//     courseVenue: [],
//     isActive: true,
//   },
//   {
//     courseCode: "GNS106",
//     courseTitle: "English & Communication Skills",
//     courseDescription: "English & Communication Skills course description",
//     lecturers: [],
//     courseTime: "",
//     courseDays: [],
//     courseVenue: [],
//     isActive: true,
//   },
//   {
//     courseCode: "ABE204",
//     courseTitle: "Workshop Practice",
//     courseDescription: "Workshop Practice course description",
//     lecturers: [],
//     courseTime: "",
//     courseDays: [],
//     courseVenue: [],
//     isActive: true,
//   },
//   {
//     courseCode: "ELE202",
//     courseTitle: "Applied Electricity",
//     courseDescription: "Applied Electricity course description",
//     lecturers: [],
//     courseTime: "",
//     courseDays: [],
//     courseVenue: [],
//     isActive: true,
//   },
//   {
//     courseCode: "MTS205",
//     courseTitle: "Calculus II",
//     courseDescription: "Calculus II course description",
//     lecturers: [],
//     courseTime: "",
//     courseDays: [],
//     courseVenue: [],
//     isActive: true,
//   },
// ];


// // --- Venues ---
// const venues: Venue[] = [
//   {
//     id: "lh-a",
//     name: "Lecture Hall A",
//     lat: 7.2162,
//     lng: 3.4531,
//     radius: 25,
//     building: "Academic Block",
//     floor: "Ground Floor",
//     capacity: 200,
//     isActive: true,
//   },
//   {
//     id: "main-aud",
//     name: "Main Auditorium",
//     lat: 7.2185,
//     lng: 3.4542,
//     radius: 30,
//     building: "Main Building",
//     floor: "First Floor",
//     capacity: 500,
//     isActive: true,
//   },
//   {
//     id: "sci-301",
//     name: "Science Block 301",
//     lat: 7.2158,
//     lng: 3.4529,
//     radius: 20,
//     building: "Science Block",
//     floor: "Third Floor",
//     capacity: 50,
//     isActive: true,
//   },
//   {
//     id: "eng-lh",
//     name: "Engineering Lecture Hall",
//     lat: 7.2177,
//     lng: 3.455,
//     radius: 35,
//     building: "Engineering Block",
//     floor: "Second Floor",
//     capacity: 150,
//     isActive: true,
//   },
// ];

// // Days of the week for selection
// const daysOfWeek = [
//   "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"
// ];

// export default function AttendanceDashboard() {
//   const [selectedCourses, setSelectedCourses] = useState<CourseSelection[]>([]);
//   const [publishedCourses, setPublishedCourses] = useState<CourseSelection[]>([]);
//   const [open, setOpen] = useState(false);
//   const [lecturerName, setLecturerName] = useState("");

//   const handleSelect = (course: CourseSelection) => {
//     const alreadyAdded = selectedCourses.find((c) => c.courseCode === course.courseCode);
//     if (alreadyAdded) {
//       toast.error("Course already selected");
//       return;
//     }
    
//     const newCourseSelection: CourseSelection = {
//       courseCode: course.courseCode,
//       courseTitle: course.courseTitle,
//       courseDescription: `${course.courseTitle} course description`, // Default description
//       lecturers: [],
//       courseTime: "",
//       courseDays: [],
//       courseVenue: [],
//       isActive: true,
//     };
    
//     setSelectedCourses((prev) => [...prev, newCourseSelection]);
//     toast.success(`${course.courseCode} added`);
//     setOpen(false);
//   };

//   const removeCourse = (courseCode: string) => {
//     setSelectedCourses((prev) => prev.filter((c) => c.courseCode !== courseCode));
//   };

//   const handleUpdateCourse = (courseCode: string, updates: Partial<CourseSelection>) => {
//     setSelectedCourses((prev) =>
//       prev.map((c) => (c.courseCode === courseCode ? { ...c, ...updates } : c))
//     );
//   };

//   const toggleDay = (courseCode: string, day: string) => {
//     setSelectedCourses((prev) =>
//       prev.map((c) => {
//         if (c.courseCode === courseCode) {
//           const updatedDays = c.courseDays.includes(day)
//             ? c.courseDays.filter((d) => d !== day)
//             : [...c.courseDays, day];
//           return { ...c, courseDays: updatedDays };
//         }
//         return c;
//       })
//     );
//   };

//   const addLecturer = (courseCode: string, lecturer: string) => {
//     if (!lecturer.trim()) return;
    
//     setSelectedCourses((prev) =>
//       prev.map((c) => {
//         if (c.courseCode === courseCode) {
//           if (!c.lecturers.includes(lecturer.trim())) {
//             return { ...c, lecturers: [...c.lecturers, lecturer.trim()] };
//           }
//         }
//         return c;
//       })
//     );
//   };

//   const removeLecturer = (courseCode: string, lecturer: string) => {
//     setSelectedCourses((prev) =>
//       prev.map((c) => {
//         if (c.courseCode === courseCode) {
//           return { ...c, lecturers: c.lecturers.filter((l) => l !== lecturer) };
//         }
//         return c;
//       })
//     );
//   };

//   const createCourse = async (courseData: CourseSelection) => {
//     try {
//       const response = await fetch(`${import.meta.env.VITE_API_URL}/create-course`, {
//         method: 'POST',
//         headers: {
//           'Content-Type': 'application/json',
//         },
//         body: JSON.stringify({
//           courseCode: courseData.courseCode,
//           courseTitle: courseData.courseTitle,
//           courseDescription: courseData.courseDescription,
//           lecturers: courseData.lecturers,
//           courseTime: courseData.courseTime,
//           courseDays: courseData.courseDays,
//           courseVenue: courseData.courseVenue,
//           isActive: courseData.isActive,
//         }),
//       });

//       if (!response.ok) {
//         throw new Error(`HTTP error! status: ${response.status}`);
//       }

//       const result = await response.json();
//       return result;
//     } catch (error) {
//       console.error('Error creating course:', error);
//       throw error;
//     }
//   };

//   const handleSubmit = async () => {
//     const coursesToPublish = selectedCourses.filter(
//       (c) => c.courseTime && c.courseDays.length > 0 && c.courseVenue.length > 0 && c.lecturers.length > 0
//     );

//     if (coursesToPublish.length === 0) {
//       toast.error("Please fill in all details (lecturers, venue, time, days) for at least one course.");
//       return;
//     }

//     try {
//       const promises = coursesToPublish.map(course => createCourse(course));
//       await Promise.all(promises);
      
//       setPublishedCourses((prev) => [...prev, ...coursesToPublish]);
//       setSelectedCourses([]);
//       toast.success("Courses created and published successfully!");
//     } catch (error) {
//       toast.error("Failed to create courses. Please try again.");
//       console.error('Error:', error);
//     }
//   };

//   return (
//     <motion.div
//       className="max-w-5xl mx-auto py-10 px-4 space-y-10"
//       initial={{ opacity: 0, y: 20 }}
//       animate={{ opacity: 1, y: 0 }}
//       transition={{ type: "spring", stiffness: 100, damping: 20 }}
//     >
//       {/* Header */}
//       <motion.div
//         className="space-y-2"
//         initial={{ opacity: 0, y: 20 }}
//         animate={{ opacity: 1, y: 0 }}
//         transition={{ delay: 0.1, type: "spring" }}
//       >
//         <h2 className="text-3xl font-bold">Welcome, Lecturer</h2>
//         <p className="text-primary max-w-2xl">
//           This dashboard helps you create and manage courses. You can
//           add courses, set course parameters, and publish them.
//         </p>
//       </motion.div>

//       {/* Stats */}
//       <motion.div
//         className="grid grid-cols-1 md:grid-cols-3 gap-4"
//         initial={{ opacity: 0, y: 20 }}
//         animate={{ opacity: 1, y: 0 }}
//         transition={{ delay: 0.2, type: "spring" }}
//       >
//         {/* <Card>
//           <CardContent className="p-4">
//             <p className="text-sm text-muted-foreground">Available Courses</p>
//             <p className="text-2xl font-bold">{allCourses.length}</p>
//           </CardContent>
//         </Card> */}
//         <Card>
//           <CardContent className="p-4">
//             <p className="text-sm text-muted-foreground">Created Courses</p>
//             <p className="text-2xl font-bold">{publishedCourses.length}</p>
//           </CardContent>
//         </Card>
//         <Card>
//           <CardContent className="p-4">
//             <p className="text-sm text-muted-foreground">Active Courses</p>
//             <p className="text-2xl font-bold">
//               {publishedCourses.filter((c) => c.isActive).length}
//             </p>
//           </CardContent>
//         </Card>
//       </motion.div>

//       {/* Course Selection */}
//       <motion.div
//         className="space-y-4"
//         initial={{ opacity: 0, y: 20 }}
//         animate={{ opacity: 1, y: 0 }}
//         transition={{ delay: 0.3, type: "spring" }}
//       >
//         <h2 className="text-2xl font-bold">Create New Course</h2>

//         <Popover open={open} onOpenChange={setOpen}>
//           <PopoverTrigger asChild>
//             <Button variant="default" className="w-full justify-start">
//               Select courses...
//             </Button>
//           </PopoverTrigger>
//           <PopoverContent className="md:w-md w-[300px] p-0">
//             <Command className="w-full dark:text-white">
//               <CommandInput placeholder="Search courses..." />
//               <CommandList>
//                 <CommandEmpty>No results found.</CommandEmpty>
//                 <CommandGroup heading="Courses">
//                   {allCourses.map((course, i) => (
//                     <motion.div
//                       key={i}
//                       initial={{ opacity: 0, x: -10 }}
//                       animate={{ opacity: 1, x: 0 }}
//                       transition={{ delay: i * 0.05, type: "spring" }}
//                     >
//                       <CommandItem
//                         value={course.courseCode + " " + course.courseTitle}
//                         onSelect={() => handleSelect(course)}
//                       >
//                         <div>
//                           <p className="font-medium">{course.courseCode}</p>
//                           <p className="text-sm text-muted-foreground">
//                             {course.courseTitle}
//                           </p>
//                         </div>
//                       </CommandItem>
//                     </motion.div>
//                   ))}
//                 </CommandGroup>
//               </CommandList>
//             </Command>
//           </PopoverContent>
//         </Popover>

//         {/* Selected Courses */}
//         <div className="space-y-4">
//           <h3 className="text-lg font-semibold">Selected Courses</h3>
//           {selectedCourses.length === 0 ? (
//             <p className="text-muted-foreground">No courses selected yet.</p>
//           ) : (
//             <div className="space-y-4">
//               {selectedCourses.map((course, i) => (
//                 <motion.div
//                   key={course.courseCode}
//                   className="p-4 border rounded-md bg-accent shadow-sm space-y-3"
//                   initial={{ opacity: 0, y: 10 }}
//                   animate={{ opacity: 1, y: 0 }}
//                   transition={{ delay: i * 0.05, type: "spring" }}
//                 >
//                   <div className="flex justify-between items-center">
//                     <p className="font-medium">{course.courseCode}</p>
//                     <Button
//                       variant="ghost"
//                       size="icon"
//                       onClick={() => removeCourse(course.courseCode)}
//                     >
//                       <X className="w-4 h-4" />
//                     </Button>
//                   </div>

//                   {/* Course Description */}
//                   <div>
//                     <label className="text-sm font-medium">Course Description</label>
//                     <Input
//                       placeholder="Enter course description"
//                       value={course.courseDescription}
//                       onChange={(e) =>
//                         handleUpdateCourse(course.courseCode, { courseDescription: e.target.value })
//                       }
//                     />
//                   </div>

//                   {/* Lecturers */}
//                   <div>
//                     <label className="text-sm font-medium">Lecturers</label>
//                     <div className="flex gap-2 mb-2">
//                       <Input
//                         placeholder="Add lecturer name"
//                         value={lecturerName}
//                         onChange={(e) => setLecturerName(e.target.value)}
//                         onKeyPress={(e) => {
//                           if (e.key === 'Enter') {
//                             addLecturer(course.courseCode, lecturerName);
//                             setLecturerName("");
//                           }
//                         }}
//                       />
//                       <Button
//                         variant="outline"
//                         onClick={() => {
//                           addLecturer(course.courseCode, lecturerName);
//                           setLecturerName("");
//                         }}
//                       >
//                         Add
//                       </Button>
//                     </div>
//                     <div className="flex flex-wrap gap-2">
//                       {course.lecturers.map((lecturer) => (
//                         <div
//                           key={lecturer}
//                           className="bg-primary text-primary-foreground px-2 py-1 rounded-md text-sm flex items-center gap-2"
//                         >
//                           {lecturer}
//                           <X
//                             className="w-3 h-3 cursor-pointer"
//                             onClick={() => removeLecturer(course.courseCode, lecturer)}
//                           />
//                         </div>
//                       ))}
//                     </div>
//                   </div>

//                   {/* Venue Selection */}
//                   <Popover>
//                     <PopoverTrigger asChild>
//                       <Button variant="outline" className="w-full justify-start">
//                         {course.venue
//                           ? `${course.venue.name} (${course.venue.building})`
//                           : "Select venue"}
//                       </Button>
//                     </PopoverTrigger>
//                     <PopoverContent className="w-[300px] p-0">
//                       <Command>
//                         <CommandInput placeholder="Search venues..." />
//                         <CommandList>
//                           <CommandEmpty>No venues found.</CommandEmpty>
//                           <CommandGroup heading="Venues">
//                             {venues
//                               .filter((v) => v.isActive)
//                               .map((venue) => (
//                                 <CommandItem
//                                   key={venue.id}
//                                   value={venue.name + " " + venue.building}
//                                   onSelect={() =>
//                                     handleUpdateCourse(course.courseCode, { 
//                                       venue,
//                                       courseVenue: [venue.name] 
//                                     })
//                                   }
//                                 >
//                                   <div className="flex flex-col">
//                                     <span className="font-medium">{venue.name}</span>
//                                     <span className="text-sm text-muted-foreground">
//                                       {venue.building} • {venue.floor} • Cap:{" "}
//                                       {venue.capacity}
//                                     </span>
//                                   </div>
//                                   {course.venue?.id === venue.id && (
//                                     <Check className="ml-auto w-4 h-4 text-green-500" />
//                                   )}
//                                 </CommandItem>
//                               ))}
//                           </CommandGroup>
//                         </CommandList>
//                       </Command>
//                     </PopoverContent>
//                   </Popover>

//                   {/* Time */}
//                   <div>
//                     <label className="text-sm font-medium">Course Time</label>
//                     <Input
//                       type="time"
//                       value={course.courseTime || ""}
//                       onChange={(e) =>
//                         handleUpdateCourse(course.courseCode, { courseTime: e.target.value })
//                       }
//                     />
//                   </div>

//                   {/* Days Selection */}
//                   <div>
//                     <label className="text-sm font-medium">Course Days</label>
//                     <div className="flex flex-wrap gap-2 mt-2">
//                       {daysOfWeek.map((day) => (
//                         <Button
//                           key={day}
//                           variant={course.courseDays.includes(day) ? "default" : "outline"}
//                           size="sm"
//                           onClick={() => toggleDay(course.courseCode, day)}
//                         >
//                           {day.substring(0, 3)}
//                         </Button>
//                       ))}
//                     </div>
//                   </div>

//                   {/* Venue Details */}
//                   {course.venue && (
//                     <div className="text-sm text-muted-foreground bg-muted p-2 rounded">
//                       <p>
//                         <strong>Building:</strong> {course.venue.building}
//                       </p>
//                       <p>
//                         <strong>Floor:</strong> {course.venue.floor}
//                       </p>
//                       <p>
//                         <strong>Capacity:</strong> {course.venue.capacity} students
//                       </p>
//                       <p>
//                         <strong>Detection Radius:</strong> {course.venue.radius}m
//                       </p>
//                     </div>
//                   )}
//                 </motion.div>
//               ))}
//               <Button onClick={handleSubmit} className="w-full mt-4">
//                 Create Courses
//               </Button>
//             </div>
//           )}
//         </div>
//       </motion.div>

//       {/* Published Courses */}
//       <motion.div
//         className="space-y-4"
//         initial={{ opacity: 0, y: 20 }}
//         animate={{ opacity: 1, y: 0 }}
//         transition={{ delay: 0.5, type: "spring" }}
//       >
//         <h2 className="text-2xl font-bold">Created Courses</h2>
//         {publishedCourses.length === 0 ? (
//           <p className="text-muted-foreground">
//             No courses have been created yet.
//           </p>
//         ) : (
//           <div className="space-y-4">
//             {publishedCourses.map((course, i) => (
//               <motion.div
//                 key={course.courseCode}
//                 className="p-4 border rounded-md bg-white dark:bg-zinc-800 shadow-sm space-y-2"
//                 initial={{ opacity: 0, y: 10 }}
//                 animate={{ opacity: 1, y: 0 }}
//                 transition={{ delay: i * 0.1, type: "spring" }}
//               >
//                 <div className="flex justify-between items-center">
//                   <h4 className="font-semibold text-lg">{course.courseCode}</h4>
//                   <span className="text-sm text-green-600 font-medium">
//                     {course.isActive ? "Active" : "Inactive"}
//                   </span>
//                 </div>
//                 <div className="text-sm text-muted-foreground">
//                   <p>
//                     <span className="font-medium">Title:</span> {course.courseTitle}
//                   </p>
//                   <p>
//                     <span className="font-medium">Description:</span> {course.courseDescription}
//                   </p>
//                   <p>
//                     <span className="font-medium">Lecturers:</span> {course.lecturers.join(", ")}
//                   </p>
//                   <p>
//                     <span className="font-medium">Venue:</span> {course.courseVenue}
//                   </p>
//                   <p>
//                     <span className="font-medium">Time:</span> {course.courseTime}
//                   </p>
//                   <p>
//                     <span className="font-medium">Days:</span> {course.courseDays.join(", ")}
//                   </p>
//                 </div>
//               </motion.div>
//             ))}
//           </div>
//         )}
//       </motion.div>
//     </motion.div>
//   );
// }

// import { useState } from "react";
// import { X, Check } from "lucide-react";
// import { Button } from "../../components/ui/button";
// import {
//   Command,
//   CommandEmpty,
//   CommandGroup,
//   CommandInput,
//   CommandItem,
//   CommandList,
// } from "../../components/ui/command";
// import {
//   Popover,
//   PopoverContent,
//   PopoverTrigger,
// } from "../../components/ui/popover";
// import { Input } from "../../components/ui/input";
// import { motion } from "framer-motion";
// import { Card, CardContent } from "../../components/ui/card";
// import { toast } from "sonner";
// import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "../../components/ui/dialog";

// // --- Types ---
// type Venue = {
//   id: string;
//   name: string;
//   lat: number;
//   lng: number;
//   radius: number;
//   building?: string;
//   floor?: string;
//   capacity?: number;
//   isActive: boolean;
// };

// type CourseSelection = {
//   courseCode: string;
//   courseTitle: string;
//   courseDescription: string;
//   lecturers: string[];
//   courseTime: string;
//   courseDays: string[];
//   courseVenue: string;
//   isActive: boolean;
//   venue?: Venue;
//   date?: Date;
// };

// // --- Venues ---
// const venues: Venue[] = [
//   {
//     id: "lh-a",
//     name: "Lecture Hall A",
//     lat: 7.2162,
//     lng: 3.4531,
//     radius: 25,
//     building: "Academic Block",
//     floor: "Ground Floor",
//     capacity: 200,
//     isActive: true,
//   },
//   {
//     id: "main-aud",
//     name: "Main Auditorium",
//     lat: 7.2185,
//     lng: 3.4542,
//     radius: 30,
//     building: "Main Building",
//     floor: "First Floor",
//     capacity: 500,
//     isActive: true,
//   },
//   {
//     id: "sci-301",
//     name: "Science Block 301",
//     lat: 7.2158,
//     lng: 3.4529,
//     radius: 20,
//     building: "Science Block",
//     floor: "Third Floor",
//     capacity: 50,
//     isActive: true,
//   },
//   {
//     id: "eng-lh",
//     name: "Engineering Lecture Hall",
//     lat: 7.2177,
//     lng: 3.455,
//     radius: 35,
//     building: "Engineering Block",
//     floor: "Second Floor",
//     capacity: 150,
//     isActive: true,
//   },
// ];

// // Days of the week for selection
// const daysOfWeek = [
//   "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"
// ];

// export default function AttendanceDashboard() {
//   const [selectedCourses, setSelectedCourses] = useState<CourseSelection[]>([]);
//   const [publishedCourses, setPublishedCourses] = useState<CourseSelection[]>([]);
//   const [activeCourses, setActiveCourses] = useState<CourseSelection[]>([]);
//   const [allCourses, setAllCourses] = useState<CourseSelection[]>([]);
//   const [open, setOpen] = useState(false);
//   const [lecturerName, setLecturerName] = useState("");
//   const [isLoadingActive, setIsLoadingActive] = useState(false);
//   const [isLoadingAll, setIsLoadingAll] = useState(false);

//   const handleSelect = (course: CourseSelection) => {
//     const alreadyAdded = selectedCourses.find((c) => c.courseCode === course.courseCode);
//     if (alreadyAdded) {
//       toast.error("Course already selected");
//       return;
//     }
    
//     const newCourseSelection: CourseSelection = {
//       courseCode: course.courseCode,
//       courseTitle: course.courseTitle,
//       courseDescription: `${course.courseTitle} course description`, // Default description
//       lecturers: [],
//       courseTime: "",
//       courseDays: [],
//       courseVenue: "",
//       isActive: true,
//     };
    
//     setSelectedCourses((prev) => [...prev, newCourseSelection]);
//     toast.success(`${course.courseCode} added`);
//     setOpen(false);
//   };

//   const removeCourse = (courseCode: string) => {
//     setSelectedCourses((prev) => prev.filter((c) => c.courseCode !== courseCode));
//   };

//   const handleUpdateCourse = (courseCode: string, updates: Partial<CourseSelection>) => {
//     setSelectedCourses((prev) =>
//       prev.map((c) => (c.courseCode === courseCode ? { ...c, ...updates } : c))
//     );
//   };

//   const toggleDay = (courseCode: string, day: string) => {
//     setSelectedCourses((prev) =>
//       prev.map((c) => {
//         if (c.courseCode === courseCode) {
//           const updatedDays = c.courseDays.includes(day)
//             ? c.courseDays.filter((d) => d !== day)
//             : [...c.courseDays, day];
//           return { ...c, courseDays: updatedDays };
//         }
//         return c;
//       })
//     );
//   };

//   const addLecturer = (courseCode: string, lecturer: string) => {
//     if (!lecturer.trim()) return;
    
//     setSelectedCourses((prev) =>
//       prev.map((c) => {
//         if (c.courseCode === courseCode) {
//           if (!c.lecturers.includes(lecturer.trim())) {
//             return { ...c, lecturers: [...c.lecturers, lecturer.trim()] };
//           }
//         }
//         return c;
//       })
//     );
//   };

//   const removeLecturer = (courseCode: string, lecturer: string) => {
//     setSelectedCourses((prev) =>
//       prev.map((c) => {
//         if (c.courseCode === courseCode) {
//           return { ...c, lecturers: c.lecturers.filter((l) => l !== lecturer) };
//         }
//         return c;
//       })
//     );
//   };

//   const createCourse = async (courseData: CourseSelection) => {
//     try {
//       const response = await fetch('/create-course', {
//         method: 'POST',
//         headers: {
//           'Content-Type': 'application/json',
//         },
//         body: JSON.stringify({
//           courseCode: courseData.courseCode,
//           courseTitle: courseData.courseTitle,
//           courseDescription: courseData.courseDescription,
//           lecturers: courseData.lecturers,
//           courseTime: courseData.courseTime,
//           courseDays: courseData.courseDays,
//           courseVenue: courseData.courseVenue,
//           isActive: courseData.isActive,
//         }),
//       });

//       if (!response.ok) {
//         throw new Error(`HTTP error! status: ${response.status}`);
//       }

//       const result = await response.json();
//       return result;
//     } catch (error) {
//       console.error('Error creating course:', error);
//       throw error;
//     }
//   };

//   const fetchActiveCourses = async () => {
//     setIsLoadingActive(true);
//     try {
//       const response = await fetch('/active-courses');
//       if (!response.ok) {
//         throw new Error(`HTTP error! status: ${response.status}`);
//       }
//       const data = await response.json();
//       setActiveCourses(data);
//     } catch (error) {
//       console.error('Error fetching active courses:', error);
//       toast.error('Failed to fetch active courses');
//     } finally {
//       setIsLoadingActive(false);
//     }
//   };

//   const fetchAllCourses = async () => {
//     setIsLoadingAll(true);
//     try {
//       const response = await fetch('/all-courses');
//       if (!response.ok) {
//         throw new Error(`HTTP error! status: ${response.status}`);
//       }
//       const data = await response.json();
//       setAllCourses(data);
//     } catch (error) {
//       console.error('Error fetching all courses:', error);
//       toast.error('Failed to fetch all courses');
//     } finally {
//       setIsLoadingAll(false);
//     }
//   };

//   const handleSubmit = async () => {
//     const coursesToPublish = selectedCourses.filter(
//       (c) => c.courseTime && c.courseDays.length > 0 && c.courseVenue && c.lecturers.length > 0
//     );

//     if (coursesToPublish.length === 0) {
//       toast.error("Please fill in all details (lecturers, venue, time, days) for at least one course.");
//       return;
//     }

//     try {
//       const promises = coursesToPublish.map(course => createCourse(course));
//       await Promise.all(promises);
      
//       setPublishedCourses((prev) => [...prev, ...coursesToPublish]);
//       setSelectedCourses([]);
//       toast.success("Courses created and published successfully!");
//     } catch (error) {
//       toast.error("Failed to create courses. Please try again.");
//       console.error('Error:', error);
//     }
//   };

//   return (
//     <motion.div
//       className="max-w-5xl mx-auto py-10 px-4 space-y-10"
//       initial={{ opacity: 0, y: 20 }}
//       animate={{ opacity: 1, y: 0 }}
//       transition={{ type: "spring", stiffness: 100, damping: 20 }}
//     >
//       {/* Header */}
//       <motion.div
//         className="space-y-2"
//         initial={{ opacity: 0, y: 20 }}
//         animate={{ opacity: 1, y: 0 }}
//         transition={{ delay: 0.1, type: "spring" }}
//       >
//         <h2 className="text-3xl font-bold">Welcome, Lecturer</h2>
//         <p className="text-primary max-w-2xl">
//           This dashboard helps you create and manage courses. You can
//           add courses, set course parameters, and publish them.
//         </p>
//       </motion.div>

//       {/* Stats */}
//       <motion.div
//         className="grid grid-cols-1 md:grid-cols-2 gap-4"
//         initial={{ opacity: 0, y: 20 }}
//         animate={{ opacity: 1, y: 0 }}
//         transition={{ delay: 0.2, type: "spring" }}
//       >
//         <Dialog>
//           <DialogTrigger asChild>
//             <Card className="cursor-pointer hover:bg-accent transition-colors" onClick={fetchAllCourses}>
//               <CardContent className="p-4">
//                 <p className="text-sm text-muted-foreground">Created Courses</p>
//                 <p className="text-2xl font-bold">{allCourses.length}</p>
//               </CardContent>
//             </Card>
//           </DialogTrigger>
//           <DialogContent className="max-w-4xl max-h-[80vh] overflow-y-auto">
//             <DialogHeader>
//               <DialogTitle>Created Courses</DialogTitle>
//             </DialogHeader>
//             {isLoadingAll ? (
//               <div className="flex justify-center py-8">
//                 <p>Loading courses...</p>
//               </div>
//             ) : allCourses.length === 0 ? (
//               <p className="text-muted-foreground py-8 text-center">
//                 No courses have been created yet.
//               </p>
//             ) : (
//               <div className="space-y-4 max-h-96 overflow-y-auto">
//                 {allCourses.map((course, i) => (
//                   <motion.div
//                     key={course.courseCode}
//                     className="p-4 border rounded-md bg-card shadow-sm space-y-2"
//                     initial={{ opacity: 0, y: 10 }}
//                     animate={{ opacity: 1, y: 0 }}
//                     transition={{ delay: i * 0.05, type: "spring" }}
//                   >
//                     <div className="flex justify-between items-center">
//                       <h4 className="font-semibold text-lg">{course.courseCode}</h4>
//                       <span className="text-sm text-green-600 font-medium">
//                         {course.isActive ? "Active" : "Inactive"}
//                       </span>
//                     </div>
//                     <div className="text-sm text-muted-foreground">
//                       <p>
//                         <span className="font-medium">Title:</span> {course.courseTitle}
//                       </p>
//                       <p>
//                         <span className="font-medium">Description:</span> {course.courseDescription}
//                       </p>
//                       <p>
//                         <span className="font-medium">Lecturers:</span> {course.lecturers.join(", ")}
//                       </p>
//                       <p>
//                         <span className="font-medium">Venue:</span> {course.courseVenue}
//                       </p>
//                       <p>
//                         <span className="font-medium">Time:</span> {course.courseTime}
//                       </p>
//                       <p>
//                         <span className="font-medium">Days:</span> {course.courseDays.join(", ")}
//                       </p>
//                     </div>
//                   </motion.div>
//                 ))}
//               </div>
//             )}
//           </DialogContent>
//         </Dialog>

//         <Dialog>
//           <DialogTrigger asChild>
//             <Card className="cursor-pointer hover:bg-accent transition-colors" onClick={fetchActiveCourses}>
//               <CardContent className="p-4">
//                 <p className="text-sm text-muted-foreground">Active Courses</p>
//                 <p className="text-2xl font-bold">{activeCourses.length}</p>
//               </CardContent>
//             </Card>
//           </DialogTrigger>
//           <DialogContent className="max-w-4xl max-h-[80vh] overflow-y-auto">
//             <DialogHeader>
//               <DialogTitle>Active Courses</DialogTitle>
//             </DialogHeader>
//             {isLoadingActive ? (
//               <div className="flex justify-center py-8">
//                 <p>Loading active courses...</p>
//               </div>
//             ) : activeCourses.length === 0 ? (
//               <p className="text-muted-foreground py-8 text-center">
//                 No active courses found.
//               </p>
//             ) : (
//               <div className="space-y-4 max-h-96 overflow-y-auto">
//                 {activeCourses.map((course, i) => (
//                   <motion.div
//                     key={course.courseCode}
//                     className="p-4 border rounded-md bg-card shadow-sm space-y-2"
//                     initial={{ opacity: 0, y: 10 }}
//                     animate={{ opacity: 1, y: 0 }}
//                     transition={{ delay: i * 0.05, type: "spring" }}
//                   >
//                     <div className="flex justify-between items-center">
//                       <h4 className="font-semibold text-lg">{course.courseCode}</h4>
//                       <span className="text-sm text-green-600 font-medium">
//                         Active
//                       </span>
//                     </div>
//                     <div className="text-sm text-muted-foreground">
//                       <p>
//                         <span className="font-medium">Title:</span> {course.courseTitle}
//                       </p>
//                       <p>
//                         <span className="font-medium">Description:</span> {course.courseDescription}
//                       </p>
//                       <p>
//                         <span className="font-medium">Lecturers:</span> {course.lecturers.join(", ")}
//                       </p>
//                       <p>
//                         <span className="font-medium">Venue:</span> {course.courseVenue}
//                       </p>
//                       <p>
//                         <span className="font-medium">Time:</span> {course.courseTime}
//                       </p>
//                       <p>
//                         <span className="font-medium">Days:</span> {course.courseDays.join(", ")}
//                       </p>
//                     </div>
//                   </motion.div>
//                 ))}
//               </div>
//             )}
//           </DialogContent>
//         </Dialog>
//       </motion.div>

//       {/* Course Selection */}
//       <motion.div
//         className="space-y-4"
//         initial={{ opacity: 0, y: 20 }}
//         animate={{ opacity: 1, y: 0 }}
//         transition={{ delay: 0.3, type: "spring" }}
//       >
//         <h2 className="text-2xl font-bold">Create New Course</h2>

//         <Popover open={open} onOpenChange={setOpen}>
//           <PopoverTrigger asChild>
//             <Button variant="default" className="w-full justify-start">
//               Select courses...
//             </Button>
//           </PopoverTrigger>
//           <PopoverContent className="md:w-md w-[300px] p-0">
//             <Command className="w-full dark:text-white">
//               <CommandInput placeholder="Search courses..." />
//               <CommandList>
//                 <CommandEmpty>No results found.</CommandEmpty>
//                 <CommandGroup heading="Courses">
//                   {allCourses.map((course, i) => (
//                     <motion.div
//                       key={i}
//                       initial={{ opacity: 0, x: -10 }}
//                       animate={{ opacity: 1, x: 0 }}
//                       transition={{ delay: i * 0.05, type: "spring" }}
//                     >
//                       <CommandItem
//                         value={course.courseCode + " " + course.courseTitle}
//                         onSelect={() => handleSelect(course)}
//                       >
//                         <div>
//                           <p className="font-medium">{course.courseCode}</p>
//                           <p className="text-sm text-muted-foreground">
//                             {course.courseTitle}
//                           </p>
//                         </div>
//                       </CommandItem>
//                     </motion.div>
//                   ))}
//                 </CommandGroup>
//               </CommandList>
//             </Command>
//           </PopoverContent>
//         </Popover>

//         {/* Selected Courses */}
//         <div className="space-y-4">
//           <h3 className="text-lg font-semibold">Selected Courses</h3>
//           {selectedCourses.length === 0 ? (
//             <p className="text-muted-foreground">No courses selected yet.</p>
//           ) : (
//             <div className="space-y-4">
//               {selectedCourses.map((course, i) => (
//                 <motion.div
//                   key={course.courseCode}
//                   className="p-4 border rounded-md bg-accent shadow-sm space-y-3"
//                   initial={{ opacity: 0, y: 10 }}
//                   animate={{ opacity: 1, y: 0 }}
//                   transition={{ delay: i * 0.05, type: "spring" }}
//                 >
//                   <div className="flex justify-between items-center">
//                     <p className="font-medium">{course.courseCode}</p>
//                     <Button
//                       variant="ghost"
//                       size="icon"
//                       onClick={() => removeCourse(course.courseCode)}
//                     >
//                       <X className="w-4 h-4" />
//                     </Button>
//                   </div>

//                   {/* Course Description */}
//                   <div>
//                     <label className="text-sm font-medium">Course Description</label>
//                     <Input
//                       placeholder="Enter course description"
//                       value={course.courseDescription}
//                       onChange={(e) =>
//                         handleUpdateCourse(course.courseCode, { courseDescription: e.target.value })
//                       }
//                     />
//                   </div>

//                   {/* Lecturers */}
//                   <div>
//                     <label className="text-sm font-medium">Lecturers</label>
//                     <div className="flex gap-2 mb-2">
//                       <Input
//                         placeholder="Add lecturer name"
//                         value={lecturerName}
//                         onChange={(e) => setLecturerName(e.target.value)}
//                         onKeyPress={(e) => {
//                           if (e.key === 'Enter') {
//                             addLecturer(course.courseCode, lecturerName);
//                             setLecturerName("");
//                           }
//                         }}
//                       />
//                       <Button
//                         variant="outline"
//                         onClick={() => {
//                           addLecturer(course.courseCode, lecturerName);
//                           setLecturerName("");
//                         }}
//                       >
//                         Add
//                       </Button>
//                     </div>
//                     <div className="flex flex-wrap gap-2">
//                       {course.lecturers.map((lecturer) => (
//                         <div
//                           key={lecturer}
//                           className="bg-primary text-primary-foreground px-2 py-1 rounded-md text-sm flex items-center gap-2"
//                         >
//                           {lecturer}
//                           <X
//                             className="w-3 h-3 cursor-pointer"
//                             onClick={() => removeLecturer(course.courseCode, lecturer)}
//                           />
//                         </div>
//                       ))}
//                     </div>
//                   </div>

//                   {/* Venue Selection */}
//                   <Popover>
//                     <PopoverTrigger asChild>
//                       <Button variant="outline" className="w-full justify-start">
//                         {course.venue
//                           ? `${course.venue.name} (${course.venue.building})`
//                           : "Select venue"}
//                       </Button>
//                     </PopoverTrigger>
//                     <PopoverContent className="w-[300px] p-0">
//                       <Command>
//                         <CommandInput placeholder="Search venues..." />
//                         <CommandList>
//                           <CommandEmpty>No venues found.</CommandEmpty>
//                           <CommandGroup heading="Venues">
//                             {venues
//                               .filter((v) => v.isActive)
//                               .map((venue) => (
//                                 <CommandItem
//                                   key={venue.id}
//                                   value={venue.name + " " + venue.building}
//                                   onSelect={() =>
//                                     handleUpdateCourse(course.courseCode, { 
//                                       venue,
//                                       courseVenue: venue.name 
//                                     })
//                                   }
//                                 >
//                                   <div className="flex flex-col">
//                                     <span className="font-medium">{venue.name}</span>
//                                     <span className="text-sm text-muted-foreground">
//                                       {venue.building} • {venue.floor} • Cap:{" "}
//                                       {venue.capacity}
//                                     </span>
//                                   </div>
//                                   {course.venue?.id === venue.id && (
//                                     <Check className="ml-auto w-4 h-4 text-green-500" />
//                                   )}
//                                 </CommandItem>
//                               ))}
//                           </CommandGroup>
//                         </CommandList>
//                       </Command>
//                     </PopoverContent>
//                   </Popover>

//                   {/* Time */}
//                   <div>
//                     <label className="text-sm font-medium">Course Time</label>
//                     <Input
//                       type="time"
//                       value={course.courseTime || ""}
//                       onChange={(e) =>
//                         handleUpdateCourse(course.courseCode, { courseTime: e.target.value })
//                       }
//                     />
//                   </div>

//                   {/* Days Selection */}
//                   <div>
//                     <label className="text-sm font-medium">Course Days</label>
//                     <div className="flex flex-wrap gap-2 mt-2">
//                       {daysOfWeek.map((day) => (
//                         <Button
//                           key={day}
//                           variant={course.courseDays.includes(day) ? "default" : "outline"}
//                           size="sm"
//                           onClick={() => toggleDay(course.courseCode, day)}
//                         >
//                           {day.substring(0, 3)}
//                         </Button>
//                       ))}
//                     </div>
//                   </div>

//                   {/* Venue Details */}
//                   {course.venue && (
//                     <div className="text-sm text-muted-foreground bg-muted p-2 rounded">
//                       <p>
//                         <strong>Building:</strong> {course.venue.building}
//                       </p>
//                       <p>
//                         <strong>Floor:</strong> {course.venue.floor}
//                       </p>
//                       <p>
//                         <strong>Capacity:</strong> {course.venue.capacity} students
//                       </p>
//                       <p>
//                         <strong>Detection Radius:</strong> {course.venue.radius}m
//                       </p>
//                     </div>
//                   )}
//                 </motion.div>
//               ))}
//               <Button onClick={handleSubmit} className="w-full mt-4">
//                 Create Courses
//               </Button>
//             </div>
//           )}
//         </div>
//       </motion.div>

//       {/* Published Courses - Remove this section since we now use dialogs */}
//     </motion.div>
//   );
// }

// import { motion } from "framer-motion";
// import MarkAttendance from "../components/MarkAttendance";
// import { Card, CardContent } from "../components/ui/card";
// import { useState, useEffect } from "react";
// import { MapPin } from "lucide-react";
// import { toast } from "sonner";
// import { useAuthContext } from "../hooks/use-auth";

// type Venue = {
//   id: string;
//   name: string;
//   lat: number;
//   lng: number;
//   radius: number; // meters
//   building?: string;
//   floor?: string;
//   capacity?: number;
//   isActive: boolean;
// };

// // Geolocation utilities
// class GeolocationService {
//   private static readonly EARTH_RADIUS_METERS = 6371000;

//   static calculateDistance(
//     lat1: number,
//     lng1: number,
//     lat2: number,
//     lng2: number
//   ): number {
//     const toRadians = (degrees: number) => degrees * (Math.PI / 180);

//     const dLat = toRadians(lat2 - lat1);
//     const dLng = toRadians(lng2 - lng1);

//     const a =
//       Math.sin(dLat / 2) * Math.sin(dLat / 2) +
//       Math.cos(toRadians(lat1)) *
//         Math.cos(toRadians(lat2)) *
//         Math.sin(dLng / 2) *
//         Math.sin(dLng / 2);

//     const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
//     return this.EARTH_RADIUS_METERS * c;
//   }

//   static getCurrentPosition(
//     options?: PositionOptions
//   ): Promise<GeolocationPosition> {
//     return new Promise((resolve, reject) => {
//       if (!navigator.geolocation) {
//         reject(new Error("Geolocation is not supported by this browser."));
//         return;
//       }

//       const defaultOptions: PositionOptions = {
//         enableHighAccuracy: true,
//         timeout: 15000,
//         maximumAge: 60000,
//         ...options,
//       };

//       navigator.geolocation.getCurrentPosition(resolve, reject, defaultOptions);
//     });
//   }

//   static isWithinVenue(
//     userLat: number,
//     userLng: number,
//     venue: Venue
//   ): { isWithin: boolean; distance: number } {
//     const distance = this.calculateDistance(
//       userLat,
//       userLng,
//       venue.lat,
//       venue.lng
//     );
//     return {
//       isWithin: distance <= venue.radius,
//       distance,
//     };
//   }
// }

// // Available venues (would come from DB)
// const availableVenues: Venue[] = [
//   {
//     id: "lh-a",
//     name: "Lecture Hall A",
//     lat: 7.2162,
//     lng: 3.4531,
//     radius: 25,
//     building: "Academic Block",
//     floor: "Ground Floor",
//     capacity: 200,
//     isActive: true,
//   },
//   {
//     id: "main-aud",
//     name: "Main Auditorium",
//     lat: 7.2185,
//     lng: 3.4542,
//     radius: 30,
//     building: "Main Building",
//     floor: "First Floor",
//     capacity: 500,
//     isActive: true,
//   },
//   {
//     id: "sci-301",
//     name: "Science Block 301",
//     lat: 7.2158,
//     lng: 3.4529,
//     radius: 20,
//     building: "Science Block",
//     floor: "Third Floor",
//     capacity: 50,
//     isActive: true,
//   },
//   {
//     id: "eng-lh",
//     name: "Engineering Lecture Hall",
//     lat: 7.2177,
//     lng: 3.455,
//     radius: 35,
//     building: "Engineering Block",
//     floor: "Second Floor",
//     capacity: 150,
//     isActive: true,
//   },
// ];

// export default function Dashboard() {
//   const { user } = useAuthContext();
//   const [locationGranted, setLocationGranted] = useState(false);
//   const [userLocation, setUserLocation] = useState<{
//     lat: number;
//     lng: number;
//   } | null>(null);
//   const [locationStatus, setLocationStatus] = useState<
//     "idle" | "loading" | "granted" | "denied"
//   >("idle");
//   const [nearbyVenues, setNearbyVenues] = useState<
//     Array<Venue & { distance: number; isWithin: boolean }>
//   >([]);

//   // Check venues when location changes
//   useEffect(() => {
//     if (userLocation) {
//       const venuesWithDistance = availableVenues.map((venue) => {
//         const result = GeolocationService.isWithinVenue(
//           userLocation.lat,
//           userLocation.lng,
//           venue
//         );
//         return {
//           ...venue,
//           distance: result.distance,
//           isWithin: result.isWithin,
//         };
//       });

//       setNearbyVenues(
//         venuesWithDistance.sort((a, b) => a.distance - b.distance)
//       );

//       const withinVenues = venuesWithDistance.filter((v) => v.isWithin);
//       if (withinVenues.length > 0) {
//         toast.success(
//           `You are within range of ${withinVenues.length} venue(s)`
//         );
//       }
//     }
//   }, [userLocation]);

//   const handleGrantLocation = async () => {
//     setLocationStatus("loading");

//     try {
//       const position = await GeolocationService.getCurrentPosition({
//         enableHighAccuracy: true,
//         timeout: 15000,
//         maximumAge: 60000,
//       });

//       const location = {
//         lat: position.coords.latitude,
//         lng: position.coords.longitude,
//       };

//       setUserLocation(location);
//       setLocationGranted(true);
//       setLocationStatus("granted");

//       toast.success(
//         `Location verified! (±${Math.round(
//           position.coords.accuracy
//         )}m accuracy)`
//       );
//     } catch (error) {
//       setLocationStatus("denied");
//       setLocationGranted(false);

//       let errorMessage = "Unable to retrieve your location.";
//       if (error instanceof Error) {
//         if (
//           error.message.includes("permission denied") ||
//           error.message.includes("PERMISSION_DENIED")
//         ) {
//           errorMessage = "Please grant location access to mark attendance.";
//         } else if (
//           error.message.includes("timeout") ||
//           error.message.includes("TIMEOUT")
//         ) {
//           errorMessage = "Location request timed out. Please try again.";
//         } else if (
//           error.message.includes("unavailable") ||
//           error.message.includes("POSITION_UNAVAILABLE")
//         ) {
//           errorMessage = "Location unavailable. Please check your GPS/network.";
//         }
//       }

//       toast.error(errorMessage);
//     }
//   };

//   return (
//     <div className="px-4 md:mx-4 mb-12 overflow-x-hidden">
//       <div className="mt-10 mb-6">
//         <motion.h1
//           initial={{ opacity: 0, scale: 0.8 }}
//           animate={{ opacity: 1, scale: 1 }}
//           transition={{
//             duration: 0.8,
//             ease: "easeOut",
//             type: "spring",
//             stiffness: 120,
//           }}
//           className="text-4xl text-center font-bold"
//         >
//           Welcome,{" "}
//           <span className="text-cyan-700 dark:text-cyan-200 text-5xl">
//             {user ? user?.matricNo : "student"}!
//           </span>
//         </motion.h1>
//       </div>

//       <motion.h2
//         initial={{ opacity: 0, x: -80 }}
//         animate={{ opacity: 1, x: 0 }}
//         transition={{ duration: 0.8, ease: "easeOut" }}
//         className="text-3xl font-semibold mb-6 md:mt-2 mt-14"
//       >
//         Attendance Dashboard –{" "}
//         <span className="text-cyan-700 dark:text-cyan-200">Mark Courses</span>
//       </motion.h2>

//       <motion.div
//         initial={{ opacity: 0, x: 80 }}
//         animate={{ opacity: 1, x: 0 }}
//         transition={{ duration: 0.8, ease: "easeOut" }}
//       >
//         {/* Location Status Section */}
//         <div className="mb-6">
//           <Card>
//             <CardContent className="p-4">
//               <div className="flex items-center justify-between">
//                 <div className="flex items-center space-x-2">
//                   <MapPin className="h-5 w-5" />
//                   <div>
//                     <h3 className="font-semibold">Location Status</h3>
//                     {locationStatus === "granted" && userLocation && (
//                       <div className="text-sm text-muted-foreground">
//                         <p>
//                           Lat: {userLocation.lat.toFixed(6)}, Lng:{" "}
//                           {userLocation.lng.toFixed(6)}
//                         </p>
//                       </div>
//                     )}
//                     {locationStatus === "denied" && (
//                       <p className="text-sm text-red-600">
//                         Location access denied
//                       </p>
//                     )}
//                     {locationStatus === "idle" && (
//                       <p className="text-sm text-muted-foreground">
//                         Location not requested
//                       </p>
//                     )}
//                   </div>
//                 </div>
//                 <button
//                   onClick={handleGrantLocation}
//                   disabled={locationStatus === "loading"}
//                   className={`px-6 py-2 rounded-xl ${
//                     locationStatus === "granted"
//                       ? "bg-green-600 hover:bg-green-700"
//                       : "bg-cyan-700 hover:bg-cyan-600"
//                   } text-white dark:bg-cyan-200 dark:text-black dark:hover:bg-cyan-300 disabled:opacity-50`}
//                 >
//                   {locationStatus === "loading"
//                     ? "Getting Location..."
//                     : locationStatus === "granted"
//                     ? "Refresh Location"
//                     : "Grant Location Access"}
//                 </button>
//               </div>
//             </CardContent>
//           </Card>
//         </div>

//         {/* Nearby Venues Section */}
//         {userLocation && nearbyVenues.length > 0 && (
//           <div className="mb-6">
//             <h3 className="text-xl font-semibold mb-4">Nearby Venues</h3>
//             <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
//               {nearbyVenues.slice(0, 4).map((venue) => (
//                 <Card
//                   key={venue.id}
//                   className={`${
//                     venue.isWithin
//                       ? "border-green-300 bg-green-50 dark:bg-green-900/20"
//                       : "border-red-200"
//                   }`}
//                 >
//                   <CardContent className="p-4">
//                     <div className="flex justify-between items-start">
//                       <div>
//                         <h4 className="font-semibold">{venue.name}</h4>
//                         <p className="text-sm text-muted-foreground">
//                           {venue.building} • {venue.floor}
//                         </p>
//                       </div>
//                       <div
//                         className={`px-2 py-1 rounded text-xs font-medium ${
//                           venue.isWithin
//                             ? "bg-green-100 text-green-800 border border-green-300"
//                             : "bg-red-100 text-red-800 border border-red-300"
//                         }`}
//                       >
//                         {venue.isWithin ? "In Range" : "Out of Range"}
//                       </div>
//                     </div>
//                     <div className="mt-2 text-sm text-muted-foreground">
//                       <p>Distance: {Math.round(venue.distance)}m</p>
//                       <p>Required: ≤{venue.radius}m</p>
//                       <p>Capacity: {venue.capacity} students</p>
//                     </div>
//                   </CardContent>
//                 </Card>
//               ))}
//             </div>
//           </div>
//         )}

//         <Card className="shadow-lg">
//           <CardContent className="overflow-x-auto p-0">
//             <MarkAttendance locationGranted={locationGranted} />
//           </CardContent>
//         </Card>
//       </motion.div>
//     </div>
//   );
// }


Now this whole case of roles is actually for the lecturer's panel and the admin panel, 
is the user is a lecturer or an admin, the students panel not included, as it is default. 
I actually don't understand how to implement this code because if the lecturer first signs 
in at the lecturer panel of this web app, how will it deny him from accessing the admin page