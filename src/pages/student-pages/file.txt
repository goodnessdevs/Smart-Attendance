import { useParams } from "react-router-dom";
import { useState } from "react";
import { motion } from "framer-motion";
import { toast } from "sonner";
import { useAuthContext } from "../../hooks/use-auth";
import { Loader2 } from "lucide-react";

// type Course = {
//   id: string;
//   courseName: string;
//   courseTitle: string;
//   courseDescription: string;
//   courseId: string;
//   lecturers: string[];
//   unit: string;
//   venues: string[];
//   days: string[];
//   isActive: boolean;
// };

function CheckAttendance() {
  const { courseId } = useParams<{ courseId: string }>();
  const { token, user } = useAuthContext();

  // const [course, setCourse] = useState<Course | null>(null);
  const [attendanceMarked, setAttendanceMarked] = useState(false);
  const [loading, setLoading] = useState(false);

  // Fetch the course details
  // useEffect(() => {
  //   const fetchActiveCourses = async () => {
  //     try {
  //       const res = await fetch(
  //         `${import.meta.env.VITE_BACKEND_URL}/active-courses`,
  //         {
  //           headers: {
  //             Authorization: `Bearer ${token}`,
  //           },
  //         }
  //       );
  //       if (!res.ok) throw new Error("Failed to fetch active courses");
  //       const data = await res.json();
  //       setCourse(data.courses);
  //       // console.log(data, data.courses);
  //     } catch (error) {
  //       console.error(error);
  //     } finally {
  //       setLoading(false);
  //     }
  //   };

  //   fetchActiveCourses();
  // }, [token]);

  const today = new Date();
  const dayName = today.toLocaleDateString("en-US", { weekday: "long" });

  // Mark attendance handler
  const handleMarkAttendance = async () => {
    setLoading(true);

    try {
      const res = await fetch(
        `${import.meta.env.VITE_BACKEND_URL}/mark-attendance`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`,
          },
          body: JSON.stringify({
            courseId: courseId,
            day: dayName,
            date: today.toLocaleDateString(),
            fullName: user?.fullName,
            email: user?.email,
            matricNo: user?.matricNumber,
            isPresent: true,
          }),
        }
      );

      if (!res.ok) {
        throw new Error("Failed to mark attendance");
      }

      setAttendanceMarked(true);
      toast.success("ðŸŽ‰ Attendance marked successfully!");
    } catch (error) {
      toast.error(
        error instanceof Error ? error.message : "Something went wrong"
      );
    } finally {
      setLoading(false);
    }
  };

//   if (loading && !course) {
//     return (
//       <p className="text-center flex flex-col">
//         <Loader2 className="animate-spin w-4 h-4" />
//         Loading course...
//       </p>
//     );
//   }

//   if (!course) {
//   return <p className="text-center">No active course found.</p>;
// }

  return (
    <motion.div
      className="max-w-2xl mx-auto px-4 py-8"
      initial={{ opacity: 0, y: 40 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
    >
      {/* <h2 className="text-3xl font-bold mb-2 text-primary">
        {course?.courseTitle}
      </h2>
      <p className="dark:text-gray-400 text-gray-700 text-2xs mb-6 font-semibold">
        {course?.courseName}
      </p> */}

      <div className="bg-accent rounded-xl p-5 shadow-md space-y-4">
        <p>
          <span className="font-medium">CourseId:</span> {courseId}
        </p>
        {/* <p>
          <span className="font-medium">Venues:</span>{" "}
          {course?.venues.join(", ")}
        </p> */}
        <p>
          <span className="font-medium">Day:</span> {dayName}
        </p>
        <p>
          <p>
  <span className="font-medium">Status:</span>{" "}
  {attendanceMarked ? (
    <span className="text-green-600 font-bold">Marked</span>
  ) : course?.isActive ? (
    <span className="text-yellow-600">Pending</span>
  ) : (
    <span className="text-gray-500">Closed</span>
  )}
</p>
        </p>

        {!attendanceMarked && course?.isActive && (
          <button
            onClick={handleMarkAttendance}
            disabled={loading}
            className="mt-4 w-full bg-green-600 hover:bg-green-700 text-white py-2 rounded-lg transition duration-200 disabled:opacity-50"
          >
            {loading ? "Marking..." : "Mark Attendance"}
          </button>
        )}

        {attendanceMarked && (
          <motion.div
            className="mt-6 text-center text-green-700 font-semibold"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
          >
            ðŸŽ‰ Your attendance has been marked successfully!
          </motion.div>
        )}
      </div>
    </motion.div>
  );
}

export default CheckAttendance;
