// import { useState } from "react";
// import { toast } from "sonner";
// import { X, Check } from "lucide-react";
// import { Button } from "../../components/ui/button";
// import {
//   Command,
//   CommandEmpty,
//   CommandGroup,
//   CommandInput,
//   CommandItem,
//   CommandList,
// } from "../../components/ui/command";
// import {
//   Popover,
//   PopoverContent,
//   PopoverTrigger,
// } from "../../components/ui/popover";
// import { Calendar } from "../../components/ui/calendar";
// import { Input } from "../../components/ui/input";
// import { motion } from "framer-motion";
// import { Card, CardContent } from "../../components/ui/card";

// // --- Types ---
// type Course = {
//   id: string;
//   code: string;
//   title: string;
// };

// // Define the venue type
// type Venue = {
//   name: string;
//   lat: number;
//   lng: number;
// };

// type CourseSelection = Course & {
//   venue?: Venue;
//   date?: Date;
//   time?: string;
// };

// // --- Sample list of all available courses ---
// const allCourses: Course[] = [
//   { id: "mts101", code: "MTS101", title: "Introduction to Mathematics" },
//   { id: "phs102", code: "PHS102", title: "General Physics" },
//   { id: "chm103", code: "CHM103", title: "Inorganic Chemistry" },
//   { id: "csc104", code: "CSC104", title: "Intro to Programming" },
//   { id: "bio105", code: "BIO105", title: "Cell Biology" },
//   { id: "gns106", code: "GNS106", title: "English & Communication Skills" },
//   { id: "abe204", code: "ABE204", title: "Workshop Practice" },
//   { id: "ele202", code: "ELE202", title: "Applied Electricity" },
//   { id: "mts205", code: "MTS205", title: "Calculus II" },
// ];

// // --- Hardcoded list of venues (replaces Google Places API for this example) ---
// const hardcodedVenues: Venue[] = [
//   { name: "Lecture Hall A", lat: 7.2162, lng: 3.4531 },
//   { name: "Main Auditorium", lat: 7.2185, lng: 3.4542 },
//   { name: "Science Block 301", lat: 7.2158, lng: 3.4529 },
//   { name: "Engineering Lecture Hall", lat: 7.2177, lng: 3.455 },
// ];

// export default function AttendanceDashboard() {
//   const [selectedCourses, setSelectedCourses] = useState<CourseSelection[]>([]);
//   const [open, setOpen] = useState(false);

//   const handleSelect = (course: Course) => {
//     const alreadyAdded = selectedCourses.find((c) => c.id === course.id);
//     if (alreadyAdded) {
//       toast.error("Course already selected");
//       return;
//     }
//     setSelectedCourses((prev) => [...prev, { ...course }]);
//     toast.success(`${course.code} added`);
//     setOpen(false);
//   };

//   const removeCourse = (id: string) => {
//     setSelectedCourses((prev) => prev.filter((c) => c.id !== id));
//   };

//   // Use Partial<CourseSelection> for type-safe updates
//   const handleUpdateCourse = (
//     id: string,
//     updates: Partial<CourseSelection>
//   ) => {
//     setSelectedCourses((prev) =>
//       prev.map((c) => (c.id === id ? { ...c, ...updates } : c))
//     );
//   };

//   const handleSubmit = () => {
//     const coursesToPublish = selectedCourses.filter(
//       (c) => c.date && c.time && c.venue
//     );

//     if (coursesToPublish.length === 0) {
//       toast.error(
//         "Please select a course and fill in all details (venue, date, time)."
//       );
//       return;
//     }

//     // Here you would typically send the data to your backend API
//     // for a lecturer to mark the attendance as active.
//     console.log("Publishing attendance for courses:", coursesToPublish);
//     toast.success("Attendance published successfully!");
//   };

//   return (
//     <motion.div
//       className="max-w-5xl mx-auto py-10 px-4 space-y-10"
//       initial={{ opacity: 0, y: 20 }}
//       animate={{ opacity: 1, y: 0 }}
//       transition={{ type: "spring", stiffness: 100, damping: 20 }}
//     >
//       {/* Header */}
//       <motion.div
//         className="space-y-2"
//         initial={{ opacity: 0, y: 20 }}
//         animate={{ opacity: 1, y: 0 }}
//         transition={{ delay: 0.1, type: "spring" }}
//       >
//         <h2 className="text-3xl font-bold">Welcome, Lecturer</h2>
//         <p className="text-primary max-w-2xl">
//           This dashboard helps you manage student attendance efficiently. You
//           can add courses, set attendance parameters, and start a new session.
//         </p>
//       </motion.div>

//       <motion.div
//         className="grid grid-cols-1 md:grid-cols-3 gap-4"
//         initial={{ opacity: 0, y: 20 }}
//         animate={{ opacity: 1, y: 0 }}
//         transition={{ delay: 0.2, type: "spring" }}
//       >
//         <Card>
//           <CardContent className="p-4">
//             <p className="text-sm text-muted-foreground">Courses Assigned</p>
//             <p className="text-2xl font-bold">3</p>
//           </CardContent>
//         </Card>
//         <Card>
//           <CardContent className="p-4">
//             <p className="text-sm text-muted-foreground">Total Students</p>
//             <p className="text-2xl font-bold">120</p>
//           </CardContent>
//         </Card>
//         <Card>
//           <CardContent className="p-4">
//             <p className="text-sm text-muted-foreground">Avg. Attendance</p>
//             <p className="text-2xl font-bold">87%</p>
//           </CardContent>
//         </Card>
//       </motion.div>

//       {/* Course Selection */}
//       <motion.div
//         className="space-y-4"
//         initial={{ opacity: 0, y: 20 }}
//         animate={{ opacity: 1, y: 0 }}
//         transition={{ delay: 0.3, type: "spring" }}
//       >
//         <div>
//           <h2 className="text-2xl font-bold">Set Up Attendance Session</h2>
//         </div>

//         <Popover open={open} onOpenChange={setOpen}>
//           <PopoverTrigger asChild>
//             <Button variant="default" className="w-full justify-start">
//               Select courses...
//             </Button>
//           </PopoverTrigger>
//           <PopoverContent className="md:w-md w-[300px] p-0">
//             <Command className="w-full dark:text-white">
//               <CommandInput placeholder="Search courses..." />
//               <CommandList>
//                 <CommandEmpty>No results found.</CommandEmpty>
//                 <CommandGroup heading="Courses">
//                   {allCourses.map((course, i) => (
//                     <motion.div
//                       key={course.id}
//                       initial={{ opacity: 0, x: -10 }}
//                       animate={{ opacity: 1, x: 0 }}
//                       transition={{ delay: i * 0.05, type: "spring" }}
//                     >
//                       <CommandItem
//                         value={course.code + " " + course.title}
//                         onSelect={() => handleSelect(course)}
//                       >
//                         <div>
//                           <p className="font-medium">{course.code}</p>
//                           <p className="text-sm text-muted-foreground">
//                             {course.title}
//                           </p>
//                         </div>
//                       </CommandItem>
//                     </motion.div>
//                   ))}
//                 </CommandGroup>
//               </CommandList>
//             </Command>
//           </PopoverContent>
//         </Popover>

//         {/* Selected courses list */}
//         <div className="space-y-4">
//           <h3 className="text-lg font-semibold">Selected Courses</h3>
//           {selectedCourses.length === 0 ? (
//             <p className="text-muted-foreground">No courses selected yet.</p>
//           ) : (
//             <>
//               <div className="space-y-4">
//                 {selectedCourses.map((course, i) => (
//                   <motion.div
//                     key={course.id}
//                     className="p-4 border rounded-md bg-accent shadow-sm space-y-3"
//                     initial={{ opacity: 0, y: 10 }}
//                     animate={{ opacity: 1, y: 0 }}
//                     transition={{ delay: i * 0.05, type: "spring" }}
//                     // whileHover={{ scale: 1.02 }}
//                   >
//                     <div className="flex justify-between items-center">
//                       <p className="font-medium">{course.code}</p>
//                       <Button
//                         variant="ghost"
//                         size="icon"
//                         onClick={() => removeCourse(course.id)}
//                       >
//                         <X className="w-4 h-4" />
//                       </Button>
//                     </div>

//                     {/* Venue selection */}
//                     <Popover>
//                       <PopoverTrigger asChild>
//                         <Button
//                           variant="outline"
//                           className="w-full justify-start"
//                         >
//                           {course.venue?.name || "Select venue"}
//                         </Button>
//                       </PopoverTrigger>
//                       <PopoverContent className="w-[300px] p-0">
//                         <Command>
//                           <CommandInput placeholder="Search venues..." />
//                           <CommandList>
//                             <CommandEmpty>No venues found.</CommandEmpty>
//                             <CommandGroup heading="Venues">
//                               {hardcodedVenues.map((venue, idx) => (
//                                 <CommandItem
//                                   key={idx}
//                                   value={venue.name}
//                                   onSelect={() => {
//                                     handleUpdateCourse(course.id, { venue });
//                                   }}
//                                 >
//                                   {venue.name}
//                                   {course.venue?.name === venue.name && (
//                                     <Check className="ml-auto w-4 h-4 text-green-500" />
//                                   )}
//                                 </CommandItem>
//                               ))}
//                             </CommandGroup>
//                           </CommandList>
//                         </Command>
//                       </PopoverContent>
//                     </Popover>

//                     {/* Date & Time */}
//                     <div className="flex gap-2">
//                       <Popover>
//                         <PopoverTrigger asChild>
//                           <Button variant="outline" className="flex-1">
//                             {course.date
//                               ? course.date.toDateString()
//                               : "Select date"}
//                           </Button>
//                         </PopoverTrigger>
//                         <PopoverContent className="p-0">
//                           <Calendar
//                             mode="single"
//                             selected={course.date}
//                             onSelect={(date) => {
//                               if (date) {
//                                 handleUpdateCourse(course.id, { date });
//                               }
//                             }}
//                             className="text-green-900 dark:text-green-200"
//                           />
//                         </PopoverContent>
//                       </Popover>
//                       <Input
//                         type="time"
//                         className="flex-1"
//                         value={course.time || ""}
//                         onChange={(e) =>
//                           handleUpdateCourse(course.id, {
//                             time: e.target.value,
//                           })
//                         }
//                       />
//                     </div>
//                     <Button onClick={handleSubmit} className="w-full mt-4">
//                       Save Attendance
//                     </Button>
//                   </motion.div>
//                 ))}
//               </div>
//             </>
//           )}
//         </div>
//       </motion.div>
//     </motion.div>
//   );
// }

// import { useState } from "react";
// import { toast } from "sonner";
// import { X, Check } from "lucide-react";
// import { Button } from "../../components/ui/button";
// import {
//   Command,
//   CommandEmpty,
//   CommandGroup,
//   CommandInput,
//   CommandItem,
//   CommandList,
// } from "../../components/ui/command";
// import {
//   Popover,
//   PopoverContent,
//   PopoverTrigger,
// } from "../../components/ui/popover";
// import { Calendar } from "../../components/ui/calendar";
// import { Input } from "../../components/ui/input";
// import { motion } from "framer-motion";
// import { Card, CardContent } from "../../components/ui/card";

// // --- Types ---
// type Course = {
//   id: string;
//   code: string;
//   title: string;
// };

// // Define the venue type
// type Venue = {
//   name: string;
//   lat: number;
//   lng: number;
// };

// type CourseSelection = Course & {
//   venue?: Venue;
//   date?: Date;
//   time?: string;
// };

// // --- Sample list of all available courses ---
// const allCourses: Course[] = [
//   { id: "mts101", code: "MTS101", title: "Introduction to Mathematics" },
//   { id: "phs102", code: "PHS102", title: "General Physics" },
//   { id: "chm103", code: "CHM103", title: "Inorganic Chemistry" },
//   { id: "csc104", code: "CSC104", title: "Intro to Programming" },
//   { id: "bio105", code: "BIO105", title: "Cell Biology" },
//   { id: "gns106", code: "GNS106", title: "English & Communication Skills" },
//   { id: "abe204", code: "ABE204", title: "Workshop Practice" },
//   { id: "ele202", code: "ELE202", title: "Applied Electricity" },
//   { id: "mts205", code: "MTS205", title: "Calculus II" },
// ];

// // --- Hardcoded list of venues (replaces Google Places API for this example) ---
// const hardcodedVenues: Venue[] = [
//   { name: "Lecture Hall A", lat: 7.2162, lng: 3.4531 },
//   { name: "Main Auditorium", lat: 7.2185, lng: 3.4542 },
//   { name: "Science Block 301", lat: 7.2158, lng: 3.4529 },
//   { name: "Engineering Lecture Hall", lat: 7.2177, lng: 3.455 },
// ];

// export default function AttendanceDashboard() {
//   const [selectedCourses, setSelectedCourses] = useState<CourseSelection[]>([]);
//   const [publishedCourses, setPublishedCourses] = useState<CourseSelection[]>([]);
//   const [open, setOpen] = useState(false);

//   const handleSelect = (course: Course) => {
//     const alreadyAdded = selectedCourses.find((c) => c.id === course.id) || publishedCourses.find((c) => c.id === course.id);
//     if (alreadyAdded) {
//       toast.error("Course already selected");
//       return;
//     }
//     setSelectedCourses((prev) => [...prev, { ...course }]);
//     toast.success(`${course.code} added`);
//     setOpen(false);
//   };

//   const removeCourse = (id: string) => {
//     setSelectedCourses((prev) => prev.filter((c) => c.id !== id));
//   };

//   const handleUpdateCourse = (
//     id: string,
//     updates: Partial<CourseSelection>
//   ) => {
//     setSelectedCourses((prev) =>
//       prev.map((c) => (c.id === id ? { ...c, ...updates } : c))
//     );
//   };

//   const handleSubmit = () => {
//     const coursesToPublish = selectedCourses.filter(
//       (c) => c.date && c.time && c.venue
//     );

//     if (coursesToPublish.length === 0) {
//       toast.error(
//         "Please select a course and fill in all details (venue, date, time)."
//       );
//       return;
//     }

//     setPublishedCourses((prev) => [...prev, ...coursesToPublish]);
//     setSelectedCourses([]);
//     toast.success("Attendance published successfully!");
//   };

//   return (
//     <motion.div
//       className="max-w-5xl mx-auto py-10 px-4 space-y-10"
//       initial={{ opacity: 0, y: 20 }}
//       animate={{ opacity: 1, y: 0 }}
//       transition={{ type: "spring", stiffness: 100, damping: 20 }}
//     >
//       {/* Header */}
//       <motion.div
//         className="space-y-2"
//         initial={{ opacity: 0, y: 20 }}
//         animate={{ opacity: 1, y: 0 }}
//         transition={{ delay: 0.1, type: "spring" }}
//       >
//         <h2 className="text-3xl font-bold">Welcome, Lecturer</h2>
//         <p className="text-primary max-w-2xl">
//           This dashboard helps you manage student attendance efficiently. You can
//           add courses, set attendance parameters, and start a new session.
//         </p>
//       </motion.div>

//       <motion.div
//         className="grid grid-cols-1 md:grid-cols-3 gap-4"
//         initial={{ opacity: 0, y: 20 }}
//         animate={{ opacity: 1, y: 0 }}
//         transition={{ delay: 0.2, type: "spring" }}
//       >
//         <Card>
//           <CardContent className="p-4">
//             <p className="text-sm text-muted-foreground">Courses Assigned</p>
//             <p className="text-2xl font-bold">3</p>
//           </CardContent>
//         </Card>
//         <Card>
//           <CardContent className="p-4">
//             <p className="text-sm text-muted-foreground">Total Students</p>
//             <p className="text-2xl font-bold">120</p>
//           </CardContent>
//         </Card>
//         <Card>
//           <CardContent className="p-4">
//             <p className="text-sm text-muted-foreground">Avg. Attendance</p>
//             <p className="text-2xl font-bold">87%</p>
//           </CardContent>
//         </Card>
//       </motion.div>
      
//       {/* --- Course Selection --- */}
//       <motion.div
//         className="space-y-4"
//         initial={{ opacity: 0, y: 20 }}
//         animate={{ opacity: 1, y: 0 }}
//         transition={{ delay: 0.3, type: "spring" }}
//       >
//         <div>
//           <h2 className="text-2xl font-bold">Set Up Attendance Session</h2>
//         </div>

//         <Popover open={open} onOpenChange={setOpen}>
//           <PopoverTrigger asChild>
//             <Button variant="default" className="w-full justify-start">
//               Select courses...
//             </Button>
//           </PopoverTrigger>
//           <PopoverContent className="md:w-md w-[300px] p-0">
//             <Command className="w-full dark:text-white">
//               <CommandInput placeholder="Search courses..." />
//               <CommandList>
//                 <CommandEmpty>No results found.</CommandEmpty>
//                 <CommandGroup heading="Courses">
//                   {allCourses.map((course, i) => (
//                     <motion.div
//                       key={course.id}
//                       initial={{ opacity: 0, x: -10 }}
//                       animate={{ opacity: 1, x: 0 }}
//                       transition={{ delay: i * 0.05, type: "spring" }}
//                     >
//                       <CommandItem
//                         value={course.code + " " + course.title}
//                         onSelect={() => handleSelect(course)}
//                       >
//                         <div>
//                           <p className="font-medium">{course.code}</p>
//                           <p className="text-sm text-muted-foreground">
//                             {course.title}
//                           </p>
//                         </div>
//                       </CommandItem>
//                     </motion.div>
//                   ))}
//                 </CommandGroup>
//               </CommandList>
//             </Command>
//           </PopoverContent>
//         </Popover>

//         {/* Selected courses list */}
//         <div className="space-y-4">
//           <h3 className="text-lg font-semibold">Selected Courses</h3>
//           {selectedCourses.length === 0 ? (
//             <p className="text-muted-foreground">No courses selected yet.</p>
//           ) : (
//             <div className="space-y-4">
//               {selectedCourses.map((course, i) => (
//                 <motion.div
//                   key={course.id}
//                   className="p-4 border rounded-md bg-accent shadow-sm space-y-3"
//                   initial={{ opacity: 0, y: 10 }}
//                   animate={{ opacity: 1, y: 0 }}
//                   transition={{ delay: i * 0.05, type: "spring" }}
//                 >
//                   <div className="flex justify-between items-center">
//                     <p className="font-medium">{course.code}</p>
//                     <Button
//                       variant="ghost"
//                       size="icon"
//                       onClick={() => removeCourse(course.id)}
//                     >
//                       <X className="w-4 h-4" />
//                     </Button>
//                   </div>

//                   {/* Venue selection */}
//                   <Popover>
//                     <PopoverTrigger asChild>
//                       <Button
//                         variant="outline"
//                         className="w-full justify-start"
//                       >
//                         {course.venue?.name || "Select venue"}
//                       </Button>
//                     </PopoverTrigger>
//                     <PopoverContent className="w-[300px] p-0">
//                       <Command>
//                         <CommandInput placeholder="Search venues..." />
//                         <CommandList>
//                           <CommandEmpty>No venues found.</CommandEmpty>
//                           <CommandGroup heading="Venues">
//                             {hardcodedVenues.map((venue, idx) => (
//                               <CommandItem
//                                 key={idx}
//                                 value={venue.name}
//                                 onSelect={() => {
//                                   handleUpdateCourse(course.id, { venue });
//                                 }}
//                               >
//                                 {venue.name}
//                                 {course.venue?.name === venue.name && (
//                                   <Check className="ml-auto w-4 h-4 text-green-500" />
//                                 )}
//                               </CommandItem>
//                             ))}
//                           </CommandGroup>
//                         </CommandList>
//                       </Command>
//                     </PopoverContent>
//                   </Popover>

//                   {/* Date & Time */}
//                   <div className="flex gap-2">
//                     <Popover>
//                       <PopoverTrigger asChild>
//                         <Button variant="outline" className="flex-1">
//                           {course.date
//                             ? course.date.toDateString()
//                             : "Select date"}
//                         </Button>
//                       </PopoverTrigger>
//                       <PopoverContent className="p-0">
//                         <Calendar
//                           mode="single"
//                           selected={course.date}
//                           onSelect={(date) => {
//                             if (date) {
//                               handleUpdateCourse(course.id, { date });
//                             }
//                           }}
//                           className="text-green-900 dark:text-green-200"
//                         />
//                       </PopoverContent>
//                     </Popover>
//                     <Input
//                       type="time"
//                       className="flex-1"
//                       value={course.time || ""}
//                       onChange={(e) =>
//                         handleUpdateCourse(course.id, {
//                           time: e.target.value,
//                         })
//                       }
//                     />
//                   </div>
//                 </motion.div>
//               ))}
//               <Button onClick={handleSubmit} className="w-full mt-4">
//                 Publish Attendance
//               </Button>
//             </div>
//           )}
//         </div>
//       </motion.div>
      
//       {/* --- Published Courses Section --- */}
//       <motion.div
//         className="space-y-4"
//         initial={{ opacity: 0, y: 20 }}
//         animate={{ opacity: 1, y: 0 }}
//         transition={{ delay: 0.5, type: "spring" }}
//       >
//         <div>
//           <h2 className="text-2xl font-bold">Active Attendance Sessions</h2>
//         </div>
//         {publishedCourses.length === 0 ? (
//           <p className="text-muted-foreground">
//             No attendance sessions have been published yet.
//           </p>
//         ) : (
//           <div className="space-y-4">
//             {publishedCourses.map((course, i) => (
//               <motion.div
//                 key={course.id}
//                 className="p-4 border rounded-md bg-white dark:bg-zinc-800 shadow-sm space-y-2"
//                 initial={{ opacity: 0, y: 10 }}
//                 animate={{ opacity: 1, y: 0 }}
//                 transition={{ delay: i * 0.1, type: "spring" }}
//               >
//                 <div className="flex justify-between items-center">
//                   <h4 className="font-semibold text-lg">{course.code}</h4>
//                 </div>
//                 <div className="text-sm text-muted-foreground">
//                   <p>
//                     <span className="font-medium">Venue:</span>{" "}
//                     {course.venue?.name}
//                   </p>
//                   <p>
//                     <span className="font-medium">Date:</span>{" "}
//                     {course.date?.toDateString()}
//                   </p>
//                   <p>
//                     <span className="font-medium">Time:</span> {course.time}
//                   </p>
//                 </div>
//               </motion.div>
//             ))}
//           </div>
//         )}
//       </motion.div>
//     </motion.div>
//   );
// }



































// // import { motion } from "framer-motion";
// // import MarkAttendance from "../components/MarkAttendance";
// // import { Card, CardContent } from "../components/ui/card";
// // import { useState } from "react";
// // import { toast } from "sonner";

// // export default function Dashboard() {
// //   const [locationGranted, setLocationGranted] = useState(false);

// //   const handleGrantLocation = () => {
// //     if (!navigator.geolocation) {
// //       toast.error("Geolocation is not supported by your browser.");
// //       return;
// //     }

// //     navigator.geolocation.getCurrentPosition(
// //       (position) => {
// //         const userLat = position.coords.latitude;
// //         const userLng = position.coords.longitude;

// //         // Example lecture hall location (update with real coords)
// //         const lectureLat = 7.2162;
// //         const lectureLng = 3.4531;

// //         // Radius check (25 meters)
// //         const R = 6371000; // Earth radius in meters
// //         const dLat = ((lectureLat - userLat) * Math.PI) / 180;
// //         const dLng = ((lectureLng - userLng) * Math.PI) / 180;
// //         const a =
// //           Math.sin(dLat / 2) * Math.sin(dLat / 2) +
// //           Math.cos((userLat * Math.PI) / 180) *
// //             Math.cos((lectureLat * Math.PI) / 180) *
// //             Math.sin(dLng / 2) *
// //             Math.sin(dLng / 2);
// //         const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
// //         const distance = R * c;

// //         if (distance <= 10) {
// //           setLocationGranted(true);
// //           toast.success("Location verified! You can now mark attendance.");
// //         } else {
// //           toast.error("You are not within the lecture hall perimeter.");
// //         }
// //       },
// //       () => {
// //         toast.error("Unable to retrieve your location.");
// //       }
// //     );
// //   };

// //   return (
// //     <div className="px-4 md:mx-4 mb-12 md:mb-0 overflow-x-hidden">
// //       <div className="mt-10 mb-6">
// //         <motion.h1
// //           initial={{ opacity: 0, scale: 0.8 }}
// //           animate={{ opacity: 1, scale: 1 }}
// //           transition={{
// //             duration: 0.8,
// //             ease: "easeOut",
// //             type: "spring",
// //             stiffness: 120,
// //           }}
// //           className="text-4xl text-center font-bold"
// //         >
// //           Welcome,{" "}
// //           <span className="text-cyan-700 dark:text-cyan-200 text-5xl">
// //             20251234!
// //           </span>
// //         </motion.h1>
// //       </div>
// //       <motion.h2
// //         initial={{ opacity: 0, x: -80 }}
// //         animate={{ opacity: 1, x: 0 }}
// //         transition={{ duration: 0.8, ease: "easeOut" }}
// //         className="text-3xl font-semibold mb-6 md:mt-2 mt-14"
// //       >
// //         Attendance Dashboard –{" "}
// //         <span className="text-cyan-700 dark:text-cyan-200">Mark Courses</span>
// //       </motion.h2>

// //       <motion.div
// //         initial={{ opacity: 0, x: 80 }}
// //         animate={{ opacity: 1, x: 0 }}
// //         transition={{ duration: 0.8, ease: "easeOut" }}
// //       >
// //         <div className="flex justify-center md:justify-start mb-6">
// //           <button
// //             onClick={handleGrantLocation}
// //             className="px-6 py-2 rounded-xl bg-cyan-700 dark:bg-cyan-200 text-white dark:text-black hover:bg-cyan-600 dark:hover:bg-cyan-300"
// //           >
// //             Grant Location Access
// //           </button>
// //         </div>
// //         <Card className="shadow-lg">
// //           <CardContent className="overflow-x-auto p-0">
// //             <MarkAttendance locationGranted={locationGranted} />
// //           </CardContent>
// //         </Card>
// //       </motion.div>
// //     </div>
// //   );
// // }

// import { motion } from "framer-motion";
// import MarkAttendance from "../components/MarkAttendance";
// import { Card, CardContent } from "../components/ui/card";
// import { useState } from "react";
// import { toast } from "sonner";

// // Define a constant for the geofence radius.
// // A radius between 15 and 25 meters is more realistic for an indoor geofence.
// const GEOFENCE_RADIUS_METERS = 20;

// export default function Dashboard() {
//   const [locationGranted, setLocationGranted] = useState(false);

//   const handleGrantLocation = () => {
//     // Check if the browser supports geolocation
//     if (!navigator.geolocation) {
//       toast.error("Geolocation is not supported by your browser.");
//       return;
//     }

//     // Attempt to get the user's current position
//     navigator.geolocation.getCurrentPosition(
//       (position) => {
//         // Retrieve the user's coordinates
//         const userLat = position.coords.latitude;
//         const userLng = position.coords.longitude;

//         // --- Geofence Coordinates ---
//         // These should be the real coordinates of the lecture hall.
//         const lectureLat = 7.2162;
//         const lectureLng = 3.4531;

//         // Haversine formula to calculate the distance between two points on Earth
//         const toRadians = (deg: number) => deg * (Math.PI / 180);
//         const R = 6371e3; // Earth's radius in meters
//         const dLat = toRadians(lectureLat - userLat);
//         const dLng = toRadians(lectureLng - userLng);

//         const a =
//           Math.sin(dLat / 2) * Math.sin(dLat / 2) +
//           Math.cos(toRadians(userLat)) *
//             Math.cos(toRadians(lectureLat)) *
//             Math.sin(dLng / 2) *
//             Math.sin(dLng / 2);

//         const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

//         const distance = R * c; // Distance in meters

//         // Check if the user is within the geofence radius
//         if (distance <= GEOFENCE_RADIUS_METERS) {
//           setLocationGranted(true);
//           toast.success("Location verified! You are within the attendance zone.");
//         } else {
//           toast.error("You are not within the lecture hall perimeter. Distance: " + Math.round(distance) + "m");
//         }
//       },
//       // Error callback
//       (error) => {
//         let errorMessage = "Unable to retrieve your location.";
//         if (error.code === error.PERMISSION_DENIED) {
//             errorMessage = "Please grant location access to mark attendance.";
//         }
//         toast.error(errorMessage);
//       }
//     );
//   };

//   return (
//     <div className="px-4 md:mx-4 mb-12 md:mb-0 overflow-x-hidden">
//       <div className="mt-10 mb-6">
//         <motion.h1
//           initial={{ opacity: 0, scale: 0.8 }}
//           animate={{ opacity: 1, scale: 1 }}
//           transition={{
//             duration: 0.8,
//             ease: "easeOut",
//             type: "spring",
//             stiffness: 120,
//           }}
//           className="text-4xl text-center font-bold"
//         >
//           Welcome,{" "}
//           <span className="text-cyan-700 dark:text-cyan-200 text-5xl">
//             20251234!
//           </span>
//         </motion.h1>
//       </div>
//       <motion.h2
//         initial={{ opacity: 0, x: -80 }}
//         animate={{ opacity: 1, x: 0 }}
//         transition={{ duration: 0.8, ease: "easeOut" }}
//         className="text-3xl font-semibold mb-6 md:mt-2 mt-14"
//       >
//         Attendance Dashboard –{" "}
//         <span className="text-cyan-700 dark:text-cyan-200">Mark Courses</span>
//       </motion.h2>

//       <motion.div
//         initial={{ opacity: 0, x: 80 }}
//         animate={{ opacity: 1, x: 0 }}
//         transition={{ duration: 0.8, ease: "easeOut" }}
//       >
//         <div className="flex justify-center md:justify-start mb-6">
//           <button
//             onClick={handleGrantLocation}
//             className="px-6 py-2 rounded-xl bg-cyan-700 dark:bg-cyan-200 text-white dark:text-black hover:bg-cyan-600 dark:hover:bg-cyan-300"
//           >
//             Grant Location Access
//           </button>
//         </div>
//         <Card className="shadow-lg">
//           <CardContent className="overflow-x-auto p-0">
//             <MarkAttendance locationGranted={locationGranted} />
//           </CardContent>
//         </Card>
//       </motion.div>
//     </div>
//   );
// }